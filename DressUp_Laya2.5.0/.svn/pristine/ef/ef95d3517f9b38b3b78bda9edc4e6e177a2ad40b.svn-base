(function () {
    'use strict';

    class PromoOpen extends Laya.Script {
        constructor() {
            super(...arguments);
            this.target = null;
        }
        onClick() {
            this.target.active = this.target.visible = true;
        }
    }

    class ButtonScale extends Laya.Script {
        constructor() {
            super(...arguments);
            this.time = .1;
            this.ratio = 1.04;
            this.startScaleX = 1;
            this.startScaleY = 1;
            this.scaled = false;
        }
        onAwake() {
            this.owner.on(Laya.Event.MOUSE_DOWN, null, () => { this.ScaleBig(); });
            this.owner.on(Laya.Event.MOUSE_UP, null, () => { this.ScaleSmall(); });
            this.owner.on(Laya.Event.MOUSE_OUT, null, () => { this.ScaleSmall(); });
        }
        ScaleBig() {
            if (this.scaled)
                return;
            this.scaled = true;
            Laya.Tween.to(this.owner, { scaleX: this.startScaleX * this.ratio, scaleY: this.startScaleY * this.ratio }, this.time * 1000);
        }
        ScaleSmall() {
            if (!this.scaled)
                return;
            this.scaled = false;
            Laya.Tween.to(this.owner, { scaleX: this.startScaleX, scaleY: this.startScaleY }, this.time * 1000);
        }
    }

    class PromoItem extends Laya.Script {
        constructor() {
            super(...arguments);
            this.bgImage = null;
            this.iconImage = null;
            this.nameText = null;
            this.infoText = null;
            this.flag1 = null;
            this.flag2 = null;
            this.flag3 = null;
        }
        onAwake() {
            this.bgImage = this.owner.getChildByName("bg");
            this.iconImage = this.owner.getChildByName("icon");
            if (this.iconImage != null) {
                this.flag1 = this.iconImage.getChildByName("flag1");
                this.flag2 = this.iconImage.getChildByName("flag2");
                this.flag3 = this.iconImage.getChildByName("flag3");
            }
            this.nameText = this.owner.getChildByName("name");
            this.infoText = this.owner.getChildByName("info");
        }
        DoLoad() {
            if (this.data == null)
                return;
            if (this.iconImage != null)
                this.iconImage.skin = this.data.icon;
            if (this.nameText != null)
                this.nameText.text = this.data.title;
            this.SetFlag();
        }
        SetFlag() {
            if (this.flag1 != null)
                this.flag1.active = this.flag1.visible = false;
            if (this.flag2 != null)
                this.flag2.active = this.flag2.visible = false;
            if (this.flag3 != null)
                this.flag3.active = this.flag3.visible = false;
            switch (this.data.tag) {
                case 1:
                    if (this.flag1 != null)
                        this.flag1.active = this.flag1.visible = true;
                    break;
                case 2:
                    if (this.flag2 != null)
                        this.flag2.active = this.flag2.visible = true;
                    break;
                case 3:
                    if (this.flag3 != null)
                        this.flag3.active = this.flag3.visible = true;
                    break;
            }
        }
        OnShow() {
            this.data.ReportShow();
        }
        OnClick() {
            this.data.Click();
            if (this.onClick_ != null) {
                this.onClick_(this);
            }
        }
        onClick() {
            this.OnClick();
        }
    }

    class Behaviour extends Laya.Script {
        constructor() {
            super(...arguments);
            this.isAwake = false;
            this.isStart = false;
            this.isEnable = false;
            this.isDestroy = false;
        }
        OnAwake() { }
        OnStart() { }
        OnUpdate() { }
        OnEnable() { }
        OnDisable() { }
        OnDestroy() { }
        DoAwake() {
            if (!this.active)
                return;
            if (!this.isAwake) {
                this.isAwake = true;
                this.OnAwake();
            }
        }
        DoStart() {
            if (!this.active)
                return;
            if (!this.isStart) {
                this.isStart = true;
                this.OnStart();
            }
        }
        DoUpdate() {
            if (!this.active)
                return;
            if (this.isStart) {
                this.OnUpdate();
            }
        }
        DoEnable() {
            if (!this.active)
                return;
            if (!this.isEnable) {
                this.isEnable = true;
                this.OnEnable();
            }
        }
        DoDisable() {
            if (this.isEnable) {
                this.isEnable = false;
                this.OnDisable();
            }
        }
        DoDestroy() {
            if (!this.isDestroy) {
                this.isDestroy = true;
                this.OnDestroy();
            }
        }
        onAwake() {
            this.DoAwake();
        }
        onStart() {
            this.DoAwake();
            this.DoStart();
        }
        onUpdate() {
            this.DoAwake();
            this.DoEnable();
            this.DoStart();
            this.DoUpdate();
        }
        onEnable() {
            this.DoAwake();
            this.DoEnable();
            this.DoStart();
        }
        onDisable() {
            this.DoDisable();
        }
        onDestroy() {
            this.DoDestroy();
        }
        static SetActive(node, value) {
            if (node == null)
                return;
            node.active = value;
            if (node instanceof Laya.Box) {
                node.visible = value;
            }
        }
        static GetActive(node) {
            if (node == null)
                return false;
            if (!node.active)
                return false;
            if (node instanceof Laya.Box) {
                if (!node.visible)
                    return false;
            }
            return true;
        }
        get active() {
            return Behaviour.GetActive(this.owner);
        }
        set active(value) {
            Behaviour.SetActive(this.owner, value);
            if (value) {
                this.DoEnable();
            }
            else {
                this.DoDisable();
            }
        }
    }

    class P201 extends Behaviour {
        constructor() {
            super(...arguments);
            this.promoItem = null;
            this.shake = false;
            this.animTime = 0;
            this.refrTime = 0;
        }
        async OnAwake() {
            this.promoItem = this.owner.getComponent(PromoItem);
            TJ.Develop.Yun.Promo.Data.ReportAwake(P201.style);
            this.promoItem.style = P201.style;
            this.active = false;
            if (Laya.Browser.onIOS && TJ.API.AppInfo.Channel() == TJ.Define.Channel.AppRt.ZJTD_AppRt)
                return;
            if (P201.promoList == null) {
                let list = await TJ.Develop.Yun.Promo.List.Get(P201.style);
                if (P201.promoList == null)
                    P201.promoList = list;
            }
            if (P201.promoList.count > 0) {
                TJ.Develop.Yun.Promo.Data.ReportStart(P201.style);
                this.active = true;
            }
            else {
                this.owner.destroy();
            }
        }
        OnEnable() {
            this.LoadAndShowIcon();
        }
        OnDisable() {
            if (P201.promoList != null) {
                P201.promoList.Unload(this.promoItem.data);
            }
        }
        OnUpdate() {
            let deltaTime = Laya.timer.delta / 1000;
            this.refrTime += deltaTime;
            if (this.refrTime > 5) {
                this.refrTime -= 5;
                this.LoadAndShowIcon();
            }
            if (!this.shake)
                return;
            this.animTime += deltaTime;
            this.animTime %= 2.5;
            if (this.animTime <= .75) {
                this.promoItem.owner.rotation = Math.sin(this.animTime * 6 * Math.PI) * 25 * (1 - this.animTime / .75);
            }
            else {
                this.promoItem.owner.rotation = 0;
            }
        }
        LoadIcon() {
            let data = P201.promoList.Load();
            if (data != null) {
                P201.promoList.Unload(this.promoItem.data);
                this.promoItem.data = data;
                this.promoItem.onClick_ = () => { this.LoadAndShowIcon(); };
                this.promoItem.DoLoad();
            }
            return data;
        }
        LoadAndShowIcon() {
            if (this.LoadIcon() != null) {
                this.promoItem.OnShow();
            }
            else {
                if (this.promoItem.data == null) {
                    this.owner.destroy();
                }
            }
        }
    }
    P201.style = "P201";
    P201.promoList = null;

    class P202 extends Behaviour {
        constructor() {
            super(...arguments);
            this.promoList = null;
            this.itemList = [];
            this.scroll = null;
            this.layout = null;
            this.prefab = null;
            this.paddingTop = 10;
            this.paddingBottom = 10;
            this.line = 0;
            this.column = 0;
            this.toTop = false;
            this.showing = [];
        }
        async OnAwake() {
            this.scroll = this.owner.getChildByName("scroll");
            this.layout = this.scroll.getChildByName("layout");
            this.prefab = this.layout.getCell(0);
            let w = this.owner.width - this.paddingTop - this.paddingBottom;
            while (w >= this.prefab.width) {
                w = w - this.prefab.width - this.layout.spaceX;
                this.column++;
            }
            TJ.Develop.Yun.Promo.Data.ReportAwake(P202.style);
            this.active = false;
            if (Laya.Browser.onIOS && TJ.API.AppInfo.Channel() == TJ.Define.Channel.AppRt.ZJTD_AppRt)
                return;
            this.promoList = await TJ.Develop.Yun.Promo.List.Get(P202.style);
            if (this.promoList.count > 0) {
                TJ.Develop.Yun.Promo.Data.ReportStart(P202.style);
                this.line = Math.ceil(this.promoList.count / this.column);
                this.layout.repeatX = this.column;
                this.layout.repeatY = this.line;
                for (let i = 0; i < this.layout.cells.length; i++) {
                    let node = this.layout.getCell(i);
                    if (i < this.promoList.count) {
                        let item = node.getComponent(PromoItem);
                        item.onAwake();
                        if (item != null) {
                            this.itemList.push(item);
                            item.style = P202.style;
                        }
                        Behaviour.SetActive(node, true);
                    }
                    else {
                        Behaviour.SetActive(node, false);
                    }
                }
                this.line = Math.ceil(this.itemList.length / this.column);
                let h = this.paddingTop + this.paddingBottom;
                h += this.prefab.height * this.line + this.layout.spaceY * (this.line - 1);
                this.layout.height = h;
                if (this.scroll.height < this.layout.height) {
                    this.scroll.vScrollBarSkin = "";
                    this.scroll.vScrollBar.rollRatio = 0;
                }
                for (let item of this.itemList) {
                    this.LoadIcon(item);
                }
                this.active = true;
            }
            else {
                this.owner.destroy();
            }
        }
        async OnDisable() {
            this.promoList = await TJ.Develop.Yun.Promo.List.Get(P202.style);
            for (let item of this.itemList) {
                this.LoadIcon(item);
            }
        }
        get maxTop() {
            return 0;
        }
        get maxBottom() {
            let y = this.paddingTop + this.paddingBottom;
            y += this.prefab.height * this.line + this.layout.spaceY * (this.line - 1) - this.scroll.height;
            return y;
        }
        get scrollValue() {
            if (this.scroll.vScrollBar != null) {
                return this.scroll.vScrollBar.value;
            }
            return 0;
        }
        set scrollValue(v) {
            if (this.scroll.vScrollBar != null) {
                this.scroll.vScrollBar.value = v;
            }
        }
        OnUpdate() {
            let deltaTime = Laya.timer.delta / 1000;
            if (this.scroll.height < this.layout.height) {
                if (this.scrollValue <= this.maxTop) {
                    this.toTop = false;
                }
                else if (this.scrollValue >= this.maxBottom) {
                    this.toTop = true;
                }
                if (this.toTop) {
                    this.scrollValue -= 50 * deltaTime;
                }
                else {
                    this.scrollValue += 50 * deltaTime;
                }
            }
            else {
                this.scrollValue = this.maxTop;
            }
            this.CheckShow();
        }
        LoadIcon(promoItem) {
            let data = this.promoList.Load();
            if (data != null) {
                this.promoList.Unload(promoItem.data);
                promoItem.data = data;
                promoItem.onClick_ = (item) => { this.LoadAndShowIcon(item); };
                promoItem.DoLoad();
                promoItem.infoText.text = 1 + Math.floor(Math.random() * 40) / 10 + "w人在玩";
            }
            return data;
        }
        LoadAndShowIcon(promoItem) {
            if (this.LoadIcon(promoItem) != null) {
                promoItem.OnShow();
            }
        }
        CheckShow() {
            for (let item of this.itemList) {
                let i = this.showing.indexOf(item);
                let node = item.owner;
                let d = Math.abs(-node.y - this.paddingTop - this.prefab.height / 2 + this.scrollValue + this.scroll.height / 2);
                if (d < this.scroll.height / 2) {
                    if (i < 0) {
                        this.showing.push(item);
                        item.OnShow();
                    }
                }
                else {
                    if (i >= 0) {
                        this.showing.splice(i, 1);
                    }
                }
            }
        }
    }
    P202.style = "P202";

    class P103 extends Behaviour {
        constructor() {
            super(...arguments);
            this.promoList = null;
            this.itemList = [];
            this.layout = null;
        }
        async OnAwake() {
            this.layout = this.owner.getChildByName("layout");
            let close = this.owner.getChildByName("close");
            close.clickHandler = new Laya.Handler(null, () => { this.OnClose(); });
            TJ.Develop.Yun.Promo.Data.ReportAwake(P103.style);
            this.active = false;
            if (Laya.Browser.onIOS && TJ.API.AppInfo.Channel() == TJ.Define.Channel.AppRt.ZJTD_AppRt)
                return;
            this.promoList = await TJ.Develop.Yun.Promo.List.Get(P103.style);
            if (this.promoList.count > 0) {
                TJ.Develop.Yun.Promo.Data.ReportStart(P103.style);
                for (let i = 0; i < this.layout.cells.length; i++) {
                    let node = this.layout.getCell(i);
                    if (i < this.promoList.count) {
                        let item = node.getComponent(PromoItem);
                        if (item != null) {
                            this.itemList.push(item);
                            item.style = P103.style;
                        }
                        node.active = node.visible = true;
                    }
                    else {
                        node.active = node.visible = false;
                    }
                }
                for (let item of this.itemList) {
                    this.LoadIcon(item);
                }
                this.active = true;
            }
            else {
                this.owner.destroy();
            }
        }
        OnEnable() {
            for (let item of this.itemList) {
                item.OnShow();
            }
        }
        async OnDisable() {
            this.promoList = await TJ.Develop.Yun.Promo.List.Get(P103.style);
            for (let item of this.itemList) {
                this.LoadIcon(item);
            }
        }
        LoadIcon(promoItem) {
            let data = this.promoList.Load();
            if (data != null) {
                this.promoList.Unload(promoItem.data);
                promoItem.data = data;
                promoItem.onClick_ = (item) => { this.LoadAndShowIcon(item); };
                promoItem.DoLoad();
            }
            return data;
        }
        LoadAndShowIcon(promoItem) {
            if (this.LoadIcon(promoItem) != null) {
                promoItem.OnShow();
            }
        }
        OnClose() {
            let node = this.owner;
            node.active = node.visible = false;
        }
    }
    P103.style = "P103";

    class P204 extends Behaviour {
        constructor() {
            super(...arguments);
            this.promoList = null;
            this.itemList = [];
            this.scroll = null;
            this.layout = null;
            this.prefab = null;
            this.paddingLeft = 20;
            this.paddingRight = 20;
            this.toLeft = false;
            this.showing = [];
        }
        async OnAwake() {
            this.scroll = this.owner.getChildByName("scroll");
            this.layout = this.scroll.getChildByName("layout");
            this.prefab = this.layout.getCell(0);
            TJ.Develop.Yun.Promo.Data.ReportAwake(P204.style);
            this.active = false;
            if (Laya.Browser.onIOS && TJ.API.AppInfo.Channel() == TJ.Define.Channel.AppRt.ZJTD_AppRt)
                return;
            let list = await TJ.Develop.Yun.Promo.List.Get(P204.style);
            if (this.promoList == null)
                this.promoList = list;
            if (this.promoList.count > 0) {
                TJ.Develop.Yun.Promo.Data.ReportStart(P204.style);
                this.layout.repeatX = this.promoList.count;
                for (let i = 0; i < this.layout.cells.length; i++) {
                    let node = this.layout.getCell(i);
                    if (i < this.promoList.count) {
                        let item = node.getComponent(PromoItem);
                        if (item != null) {
                            this.itemList.push(item);
                            item.style = P204.style;
                        }
                        node.active = node.visible = true;
                    }
                    else {
                        node.active = node.visible = false;
                    }
                }
                let w = this.paddingLeft + this.paddingRight;
                w += this.prefab.width * this.itemList.length + this.layout.spaceX * (this.itemList.length - 1);
                this.layout.width = w;
                if (this.scroll.width < this.layout.width) {
                    this.scroll.hScrollBarSkin = "";
                    this.scroll.hScrollBar.rollRatio = 0;
                }
                this.layout.width = w;
                for (let item of this.itemList) {
                    this.LoadIcon(item);
                }
                this.active = true;
            }
            else {
                this.owner.destroy();
            }
        }
        get maxLeft() {
            let x = 0;
            return x;
        }
        get maxRight() {
            let x = this.scroll.hScrollBar.max;
            return x;
        }
        get scrollValue() {
            if (this.scroll.hScrollBar != null) {
                return this.scroll.hScrollBar.value;
            }
            return 0;
        }
        set scrollValue(v) {
            if (this.scroll.hScrollBar != null) {
                this.scroll.hScrollBar.value = v;
            }
        }
        OnUpdate() {
            let deltaTime = Laya.timer.delta / 1000;
            if (this.scroll.width < this.layout.width) {
                if (this.scrollValue >= this.maxRight) {
                    this.toLeft = true;
                }
                else if (this.scrollValue <= this.maxLeft) {
                    this.toLeft = false;
                }
                if (this.toLeft) {
                    this.scrollValue -= 50 * deltaTime;
                }
                else {
                    this.scrollValue += 50 * deltaTime;
                }
            }
            else {
                this.layout.x = this.maxLeft;
            }
            this.CheckShow();
        }
        LoadIcon(promoItem) {
            let data = this.promoList.Load();
            if (data != null) {
                this.promoList.Unload(promoItem.data);
                promoItem.data = data;
                promoItem.onClick_ = (item) => { this.LoadIcon(item); };
                promoItem.DoLoad();
                let i = this.showing.indexOf(promoItem);
                if (i >= 0) {
                    this.showing.splice(i, 1);
                }
            }
            return data;
        }
        CheckShow() {
            let a = 0;
            for (let item of this.itemList) {
                let node = item.owner;
                let d = Math.abs(node.x - this.scrollValue - this.scroll.width / 2 + node.width / 2 + this.layout.spaceX);
                let i = this.showing.indexOf(item);
                if (d < this.scroll.width / 2) {
                    if (i < 0) {
                        this.showing.push(item);
                        item.OnShow();
                    }
                }
                else {
                    if (i >= 0) {
                        this.showing.splice(i, 1);
                    }
                }
            }
        }
    }
    P204.style = "P204";

    class P205 extends Behaviour {
        constructor() {
            super(...arguments);
            this.promoList = null;
            this.itemList = [];
            this.scroll = null;
            this.layout = null;
            this.prefab = null;
            this.paddingTop = 10;
            this.paddingBottom = 10;
            this.move = null;
            this.show = null;
            this.hide = null;
            this.maxX = 620;
            this.line = 0;
            this.column = 0;
            this.targetX = 0;
            this.showing = [];
        }
        async OnAwake() {
            this.move = this.owner.getChildByName("move");
            let button = this.move.getChildByName("button");
            this.show = button.getChildByName("show");
            this.hide = button.getChildByName("hide");
            let board = this.move.getChildByName("board");
            this.scroll = board.getChildByName("scroll");
            this.layout = this.scroll.getChildByName("layout");
            this.prefab = this.layout.getCell(0);
            this.show.clickHandler = new Laya.Handler(null, () => { this.Show(); });
            this.hide.clickHandler = new Laya.Handler(null, () => { this.Hide(); });
            let w = this.scroll.width - this.paddingTop - this.paddingBottom;
            while (w >= this.prefab.width) {
                w = w - this.prefab.width - this.layout.spaceX;
                this.column++;
            }
            TJ.Develop.Yun.Promo.Data.ReportAwake(P205.style);
            if (this.show.parent.scaleX < 0)
                this.maxX = -this.maxX;
            if (TJ.API.AppInfo.Channel() == TJ.Define.Channel.AppRt.ZJTD_AppRt) {
                if (Laya.Browser.onIOS) {
                    this.active = false;
                    return;
                }
                return;
            }
            this.active = false;
            this.promoList = await TJ.Develop.Yun.Promo.List.Get(P205.style);
            if (this.promoList.count > 0) {
                TJ.Develop.Yun.Promo.Data.ReportStart(P205.style);
                this.line = Math.ceil(this.promoList.count / this.column);
                this.layout.repeatX = this.column;
                this.layout.repeatY = this.line;
                for (let i = 0; i < this.layout.cells.length; i++) {
                    let node = this.layout.getCell(i);
                    if (i < this.promoList.count) {
                        let item = node.getComponent(PromoItem);
                        if (item != null) {
                            this.itemList.push(item);
                            item.style = P205.style;
                        }
                        node.active = node.visible = true;
                    }
                    else {
                        node.active = node.visible = false;
                    }
                }
                this.line = Math.ceil(this.itemList.length / this.column);
                let h = this.paddingTop + this.paddingBottom;
                h += this.prefab.height * this.line + this.layout.spaceY * (this.line - 1);
                this.layout.height = h;
                if (this.scroll.height < this.layout.height) {
                    this.scroll.vScrollBarSkin = "";
                    this.scroll.vScrollBar.rollRatio = 0;
                }
                for (let item of this.itemList) {
                    this.LoadIcon(item);
                }
                this.active = true;
            }
            else {
                this.owner.destroy();
            }
        }
        get scrollValue() {
            if (this.scroll.vScrollBar != null) {
                return this.scroll.vScrollBar.value;
            }
            return 0;
        }
        set scrollValue(v) {
            if (this.scroll.vScrollBar != null) {
                this.scroll.vScrollBar.value = v;
            }
        }
        LoadIcon(promoItem) {
            let data = this.promoList.Load();
            if (data != null) {
                this.promoList.Unload(promoItem.data);
                promoItem.data = data;
                promoItem.onClick_ = (item) => { this.LoadAndShowIcon(item); };
                promoItem.DoLoad();
            }
            return data;
        }
        LoadAndShowIcon(promoItem) {
            if (this.LoadIcon(promoItem) != null) {
                promoItem.OnShow();
            }
        }
        Show() {
            if (TJ.API.AppInfo.Channel() == TJ.Define.Channel.AppRt.ZJTD_AppRt) {
                let param = new TJ.API.Promo.Param();
                param.extraData = { "TJ_App": TJ.API.AppInfo.AppGuid() };
                TJ.API.Promo.Pop(param);
                return;
            }
            this.targetX = this.maxX;
            this.show.active = this.show.visible = false;
            this.hide.active = this.hide.visible = true;
            this.scrollValue = 0;
        }
        Hide() {
            this.targetX = 0;
            this.showing = [];
        }
        OnUpdate() {
            let deltaTime = Laya.timer.delta / 1000;
            if (this.move.centerX != this.targetX) {
                let d = this.targetX - this.move.centerX;
                let s = 3000 * deltaTime;
                if (d > 0) {
                    d = Math.min(this.move.centerX + s, this.targetX);
                }
                else {
                    d = Math.max(this.move.centerX - s, this.targetX);
                }
                this.move.centerX = d;
                if (this.move.centerX == 0) {
                    this.show.active = this.show.visible = true;
                    this.hide.active = this.hide.visible = false;
                    window.setTimeout(async () => {
                        this.promoList = await TJ.Develop.Yun.Promo.List.Get(P205.style);
                        for (let item of this.itemList) {
                            this.LoadIcon(item);
                        }
                    }, 0);
                }
            }
            else {
                if (this.move.centerX == this.maxX) {
                    this.CheckShow();
                }
            }
        }
        CheckShow() {
            for (let item of this.itemList) {
                let i = this.showing.indexOf(item);
                let node = item.owner;
                let d = Math.abs(-node.y - this.paddingTop - this.prefab.height / 2 + this.scrollValue + this.scroll.height / 2);
                if (d < this.scroll.height / 2) {
                    if (i < 0) {
                        this.showing.push(item);
                        item.OnShow();
                    }
                }
                else {
                    if (i >= 0) {
                        this.showing.splice(i, 1);
                    }
                }
            }
        }
    }
    P205.style = "P205";

    class P106 extends Behaviour {
        constructor() {
            super(...arguments);
            this.promoList = null;
            this.itemList = [];
            this.layout = null;
            this.showing = [];
        }
        async OnAwake() {
            this.scrollView = this.owner.getChildByName("scroll");
            this.layout = this.scrollView.getChildByName("layout");
            this.scrollView.vScrollBarSkin = "";
            let close = this.owner.getChildByName("close");
            close.clickHandler = new Laya.Handler(null, () => { this.OnClose(); });
            TJ.Develop.Yun.Promo.Data.ReportAwake(P106.style);
            this.active = false;
            if (Laya.Browser.onIOS && TJ.API.AppInfo.Channel() == TJ.Define.Channel.AppRt.ZJTD_AppRt)
                return;
            let list = await TJ.Develop.Yun.Promo.List.Get(P106.style);
            if (this.promoList == null)
                this.promoList = list;
            if (this.promoList.count > 0) {
                TJ.Develop.Yun.Promo.Data.ReportStart(P106.style);
                this.layout.repeatY = this.promoList.count;
                let h = 0;
                for (let i = 0; i < this.layout.cells.length; i++) {
                    let node = this.layout.getCell(i);
                    if (i < this.promoList.count) {
                        let item = node.getComponent(PromoItem);
                        if (item != null) {
                            this.itemList.push(item);
                            item.style = P106.style;
                        }
                        Behaviour.SetActive(node, true);
                    }
                    else {
                        Behaviour.SetActive(node, false);
                    }
                    if (i > 0) {
                        h += this.layout.spaceY;
                    }
                    h += node.height;
                }
                this.layout.height = h;
                for (let item of this.itemList) {
                    this.LoadIcon(item);
                }
                this.active = true;
            }
            else {
                this.owner.destroy();
            }
        }
        OnEnable() {
            this.scrollValue = 0;
        }
        async OnDisable() {
            this.promoList = await TJ.Develop.Yun.Promo.List.Get(P106.style);
            for (let item of this.itemList) {
                this.LoadIcon(item);
            }
        }
        OnUpdate() {
            this.CheckShow();
        }
        LoadIcon(promoItem) {
            let data = this.promoList.Load();
            if (data != null) {
                this.promoList.Unload(promoItem.data);
                promoItem.data = data;
                promoItem.onClick_ = (item) => { this.LoadIcon(item); };
                promoItem.DoLoad();
                let i = this.showing.indexOf(promoItem);
                if (i >= 0) {
                    this.showing.splice(i, 1);
                }
            }
            return data;
        }
        get scrollValue() {
            if (this.scrollView.vScrollBar != null) {
                return this.scrollView.vScrollBar.value;
            }
            return 0;
        }
        set scrollValue(v) {
            if (this.scrollView.vScrollBar != null) {
                this.scrollView.vScrollBar.value = v;
            }
        }
        CheckShow() {
            for (let item of this.itemList) {
                let node = item.owner;
                let d = Math.abs(node.y - this.scrollValue - this.scrollView.height / 2 + node.height / 2 + this.layout.spaceY);
                let i = this.showing.indexOf(item);
                if (d < this.scrollView.height / 2) {
                    if (i < 0) {
                        this.showing.push(item);
                        item.OnShow();
                    }
                }
                else {
                    if (i >= 0) {
                        this.showing.splice(i, 1);
                    }
                }
            }
        }
        OnClose() {
            let node = this.owner;
            node.active = node.visible = false;
        }
    }
    P106.style = "P106";

    class GameDataController extends Laya.Script {
        static get _ClothData() {
            return this._clothData;
        }
        static GetFirstLoginTime() {
            let time = Laya.LocalStorage.getItem("Sign");
            if (time) {
            }
            else {
                Laya.LocalStorage.setItem("Sign", "1562730819957");
                time = Laya.LocalStorage.getItem("Sign");
            }
            return parseFloat(time);
        }
        static setFirstLoginTime() {
            let time = Date.now();
            Laya.LocalStorage.setItem("Sign", time + "");
        }
        static ClothdatapackSet(k, v) {
            Laya.LocalStorage.setJSON(k, v);
        }
        static ClothdatapackGet(k) {
            return Laya.LocalStorage.getJSON(k);
        }
        static set ClothDataRefresh(v) {
            Laya.LocalStorage.setJSON("ClothData", v);
        }
        static get ClothDataRefresh() {
            let a = Laya.LocalStorage.getJSON("ClothData");
            return a;
        }
        static ClothAlllockNum(strs) {
            let num = Object.keys(strs).length;
            console.log(Object.keys(strs).length);
            for (let i in strs) {
                if (strs[i] == 1) {
                }
                else {
                    num--;
                }
            }
            return num;
        }
        static ClothAllLockArr(strs) {
            let num = Object.keys(strs).length;
            console.log(Object.keys(strs).length);
            let temp = [];
            for (let i in strs) {
                if (strs[i] == 1) {
                    temp.push(i);
                }
                else {
                }
            }
            console.log(temp);
            return temp;
        }
        static ClothCanUse(Id) {
            if (this._clothData.has(Id)) {
                let data = this._clothData.get(Id);
                if (data.GetType2) {
                    let str = this.ClothdatapackGet(data.GetType2);
                    if (str != null) {
                        if ((data.GetType2.split('_'))[0] == "1") {
                            let str = this.ClothDataRefresh[Id];
                            console.log(str);
                            if (str != null) {
                                if (GameDataController.ClothDataRefresh[Id] == 1) {
                                    return false;
                                }
                                else {
                                    return true;
                                }
                            }
                        }
                        else if ((data.GetType2.split('_'))[0] == "2") {
                            let num = GameDataController.ClothAlllockNum(str);
                            if (num > 0) {
                                return false;
                            }
                            else {
                                return true;
                            }
                        }
                        else {
                            return true;
                        }
                    }
                    else {
                        console.log("无当前衣服套装", Id);
                        return false;
                    }
                }
                else {
                    let str = this.ClothDataRefresh[Id];
                    console.log(str);
                    if (str != null) {
                        if (GameDataController.ClothDataRefresh[Id] == 1) {
                            return false;
                        }
                        else {
                            return true;
                        }
                    }
                    else {
                        return false;
                    }
                }
            }
            else {
                return false;
            }
        }
        static GetFirstToNow() {
            let FirstDay = this.GetFirstLoginTime();
            let NowDay = Date.now();
            let FirstDayTo1 = Math.ceil((NowDay - FirstDay) / (24 * 60 * 60 * 1000));
            console.log("两天之间的天数", FirstDayTo1);
            return FirstDayTo1;
        }
        static set PhotosData(v) {
            Laya.LocalStorage.setJSON("PhotosData", v);
        }
        static get PhotosData() {
            let a = Laya.LocalStorage.getJSON("PhotosData");
            if (a) {
            }
            else {
                Laya.LocalStorage.setJSON("PhotosData", null);
            }
            return a;
        }
        static SetLastTime() {
            let item = Date.now();
            Laya.LocalStorage.setItem("LastTime", item + "");
        }
        static GetLastTime() {
            let time = Laya.LocalStorage.getItem("LastTime");
            if (time != null) {
            }
            else {
                Laya.LocalStorage.setItem("LastTime", "1562730819957");
                time = Laya.LocalStorage.getItem("LastTime");
            }
            return parseFloat(time);
        }
        static IsNewDay() {
            let oldtime = this.GetLastTime();
            let olddate = new Date(oldtime);
            let oy = olddate.getFullYear();
            let om = olddate.getMonth();
            let od = olddate.getDate();
            let curTime = Date.now();
            let nowDate = new Date();
            let ny = nowDate.getFullYear();
            let nm = nowDate.getMonth();
            let nd = nowDate.getDate();
            return (curTime > oldtime) && (ny > oy || nm > om || nd > od);
        }
        static set TodaySign(v) {
            Laya.LocalStorage.setItem("TodaySign", v);
        }
        static get TodaySign() {
            return Laya.LocalStorage.getItem("TodaySign");
        }
    }
    GameDataController._clothData = new Map();
    GameDataController.HairData = [];
    GameDataController.DressData = [];
    GameDataController.ShirtData = [];
    GameDataController.TrousersData = [];
    GameDataController.SocksData = [];
    GameDataController.ShoseData = [];
    GameDataController.OrnamentData = [];
    GameDataController.ClothDataAsy = {};
    class ClothPackgeData extends Laya.Script {
        constructor() {
            super(...arguments);
            this.cloths1 = [];
            this.cloths2 = [];
            this.cloths3 = [];
            this.cloths4 = [];
        }
    }

    var GameEvent;
    (function (GameEvent) {
        GameEvent["preloadStep"] = "preloadStep";
        GameEvent["preloadCpl"] = "preloadCpl";
        GameEvent["pause"] = "pause";
        GameEvent["energyTick"] = "energyTick";
        GameEvent["showGRVTime"] = "showGRVTime";
        GameEvent["hideGRVTime"] = "hideGRVTime";
        GameEvent["debugExeCmd"] = "debugExeCmd";
        GameEvent["debugBtn1"] = "debugBtn1";
        GameEvent["debugBtn2"] = "debugBtn2";
        GameEvent["debugBtn3"] = "debugBtn3";
        GameEvent["debugBtn4"] = "debugBtn4";
        GameEvent["save"] = "save";
        GameEvent["renderNext"] = "renderNext";
        GameEvent["changeSkin"] = "changeSkin";
    })(GameEvent || (GameEvent = {}));
    class Formula {
        static get lang() {
            if (!Formula._lang) {
                Formula._lang = "cn";
                if (navigator) {
                    let lt = navigator.language;
                    if (lt == "zh-tw" || lt == "zh-hk") {
                        Formula._lang = "td";
                    }
                    else if (lt.indexOf("en") > 0) {
                        Formula._lang = "en";
                    }
                }
            }
            return Formula._lang;
        }
        static get isSubPkg() {
            return TJ.API.AppInfo.Channel() == TJ.Define.Channel.AppRt.WX_AppRt && Formula.subPkgInfo.length > 0;
        }
        static get banPromo() {
            return TJ.API.AppInfo.Channel() == TJ.Define.Channel.AppRt.ZJTD_AppRt || TJ.Engine.RuntimeInfo.platform == TJ.Define.Platform.Android;
        }
        static get onTT() {
            return TJ.API.AppInfo.Channel() == TJ.Define.Channel.AppRt.ZJTD_AppRt;
        }
        static get onWx() {
            return TJ.API.AppInfo.Channel() == TJ.Define.Channel.AppRt.WX_AppRt;
        }
        static getSoundPath(name, type) {
            let suffix;
            if (type == 1) {
                suffix = TJ.Engine.RuntimeInfo.platform == TJ.Define.Platform.Android ? ".wav" : ".wav";
            }
            else {
                suffix = ".mp3";
            }
            this.debug && (suffix = ".mp3");
            return Formula._soundsPath + name + suffix;
        }
        static get preloadList() {
            return this._preloadList;
        }
        ;
    }
    Formula.debug = false;
    Formula.version = "";
    Formula.showGRV = false;
    Formula.subPkgInfo = [
        { name: "sp1", root: "res3d/p1/" },
        { name: "sp2", root: "res3d/p2/" },
    ];
    Formula._soundsPath = "res/sounds/";
    Formula.playerLocalKeys = {
        gameId: 0.0,
        version: 1.0,
        sound: 1,
        signTimes: 0,
        lastSignTs: 0,
        energy: () => { return Formula.maxEnergy; },
        energyTs: "__ts__",
        lv: 0,
        exp: 0,
        best: 0,
        skinId: 1,
        skinList: { 1: -1 },
        guide: 1,
        lastDay: 1,
        todayshow: 0,
        Money: 0,
        FurnitureLevel: 1,
        level: 0,
        newPlay: 0,
    };
    Formula.maxEnergy = 0;
    Formula.recoverEnergyTs = 0 * 1000;
    Formula.startScene = {
        path: "", nodeConf: [
            "Game",
        ]
    };
    Formula._preloadList = [];
    Formula.shareTopics = ["西瓜拼拼乐", "番茄小游戏", "抖音小游戏"];
    class ConfWrap {
        constructor(name) {
            this.map = {};
            this._file = name;
        }
    }
    let LC = {
        LangConf: new ConfWrap("lang"),
        SignConf: new ConfWrap("sign"),
        SkinConf: new ConfWrap("skin"),
    };

    class Util {
        static calcBorder(camera) {
            let w = Laya.Browser.width;
            let h = Laya.Browser.height;
            let camH = camera.orthographicVerticalSize;
            let camW = w / h * camH;
            return { w: camW, h: camH, hw: camW * 0.5, hh: camH * 0.5 };
        }
        static randomInRange_i(x, y, s = null) {
            let rs;
            if (x == y) {
                rs = x;
            }
            else if (y > x) {
                let v = (y - x) * (s == null ? Math.random() : s) + x;
                rs = v.toFixed();
            }
            else {
                throw `x > y`;
            }
            return Number(rs);
        }
        static near(a, b) {
            return Math.abs(a - b) < Util.lim;
        }
        static randomInRange_f(x, y, s = null) {
            let rs;
            let g = y - x;
            if (g < 0) {
                throw `x > y`;
            }
            else {
                if (g < Util.lim) {
                    rs = x;
                }
                else {
                    rs = g * (s == null ? Math.random() : s) + x;
                }
            }
            return Number(rs);
        }
        static setVec2(targ, vecFeild, x, y) {
            let v = targ[vecFeild];
            v.setValue((x != null) ? x : v.x, (y != null) ? y : v.y);
            targ[vecFeild] = v;
        }
        static setVec3(targ, vecFeild, x, y, z) {
            let v = targ[vecFeild];
            v.setValue((x != null) ? x : v.x, (y != null) ? y : v.y, (z != null) ? z : v.z);
            targ[vecFeild] = v;
        }
        static setVec4(targ, vecFeild, x, y, z, w) {
            let v = targ[vecFeild];
            v.setValue((x != null) ? x : v.x, (y != null) ? y : v.y, (z != null) ? z : v.z, (w != null) ? w : v.w);
            targ[vecFeild] = v;
        }
        static setQuat(targ, quatField, x, y, z, w) {
            let v = targ[quatField];
            (x != null) && (v.x = x);
            (y != null) && (v.y = y);
            (z != null) && (v.z = z);
            (w != null) && (v.w = w);
            targ[quatField] = v;
        }
        static clamp(v, min, max) {
            let rs;
            if (v < min) {
                rs = min;
            }
            else if (v > max) {
                rs = max;
            }
            else {
                rs = v;
            }
            return rs;
        }
        static shakeByFactor(num, bitNum) {
            let rs = 0;
            let a = num;
            let t = Math.floor(a);
            rs += t;
            for (let i = 1; i < bitNum; i++) {
                a = (a - t) * 10;
                t = Math.floor(a);
                rs += t;
            }
            return (rs & 1) == 0 ? 1 : -1;
        }
        static rgb2hsv_arr(arr, o) {
            Util.rgb2hsv(arr[0], arr[1], arr[2], o);
        }
        static rgb2hsv(r, g, b, o_hsv) {
            let h, s, v;
            let max = Math.max(r, g, b);
            let min = Math.min(r, g, b);
            if (max == min) {
                h = g;
            }
            else if (Util.near(r, max)) {
                h = (g - b) / (max - min);
            }
            else if (Util.near(g, max)) {
                h = 2 + (b - r) / (max - min);
            }
            else {
                h = 4 + (r - g) / (max - min);
            }
            h *= 60;
            if (h < 0) {
                h += 360;
            }
            h = h / 360;
            s = (max - min) / max;
            v = max;
            o_hsv.h = h;
            o_hsv.s = s;
            o_hsv.v = v;
        }
        static hsv2rgb(hsv, o_color) {
            let R, G, B;
            let h = hsv.h, s = hsv.s, v = hsv.v;
            if (s == 0) {
                R = G = B = v;
            }
            else {
                h = h * 6;
                let i = Math.floor(h);
                let f = h - i;
                let a = v * (1 - s);
                let b = v * (1 - s * f);
                let c = v * (1 - s * (1 - f));
                switch (i) {
                    case 0:
                        R = v;
                        G = c;
                        B = a;
                        break;
                    case 1:
                        R = b;
                        G = v;
                        B = a;
                        break;
                    case 2:
                        R = a;
                        G = v;
                        B = c;
                        break;
                    case 3:
                        R = a;
                        G = b;
                        B = v;
                        break;
                    case 4:
                        R = c;
                        G = a;
                        B = v;
                        break;
                    case 5:
                        R = v;
                        G = a;
                        B = b;
                        break;
                    default:
                        R = 1;
                        G = 1;
                        B = 1;
                        console.error("hsv transfer error!");
                        break;
                }
            }
            o_color[0] = R;
            o_color[1] = G;
            o_color[2] = B;
        }
        static getFixedRandom(s) {
            let m_w = s;
            let m_z = 987654321;
            let mask = 0xffffffff;
            return function () {
                m_z = (36969 * (m_z & 65535) + (m_z >> 16)) & mask;
                m_w = (18000 * (m_w & 65535) + (m_w >> 16)) & mask;
                let result = ((m_z << 16) + m_w) & mask;
                result /= 4294967296;
                return parseFloat((result + 0.5).toFixed(2));
            };
        }
        static breakMS(ts) {
            return Util.breakS(Math.round(ts / 1000));
        }
        static breakS(s) {
            let m = Math.floor(s / 60);
            s -= m * 60;
            let mt = ('0' + m).slice(-2);
            let st = ('0' + s).slice(-2);
            return `${mt}:${st}`;
        }
        static pieMask(baseQuad, mask, sa, ea) {
            mask.graphics.clear();
            let w = baseQuad.width;
            let h = baseQuad.height;
            let hw = w * 0.5;
            let hh = h * 0.5;
            let r = hw > hh ? hh : hw;
            mask.graphics.drawPie(hw, hh, r, sa - 90, ea - 90, "fff");
        }
        static precision(num, s) {
            let offset = num < 0 ? -0.5 : 0.5;
            if (s == 0) {
                return parseInt(Number(num) + offset + '');
            }
            else {
                let times = Math.pow(10, s);
                let des = num * times + offset;
                return parseInt(des + '') / times;
            }
        }
        static formatCrc(crc, fixNum = 2) {
            let textTemp;
            if (crc >= 1e27) {
                textTemp = (crc / 1e27).toFixed(fixNum) + "ae";
            }
            else if (crc >= 1e24) {
                textTemp = (crc / 1e24).toFixed(fixNum) + "ad";
            }
            else if (crc >= 1e21) {
                textTemp = (crc / 1e21).toFixed(fixNum) + "ac";
            }
            else if (crc >= 1e18) {
                textTemp = (crc / 1e18).toFixed(fixNum) + "ab";
            }
            else if (crc >= 1e15) {
                textTemp = (crc / 1e15).toFixed(fixNum) + "aa";
            }
            else if (crc >= 1e12) {
                textTemp = (crc / 1e12).toFixed(fixNum) + "t";
            }
            else if (crc >= 1e9) {
                textTemp = (crc / 1e9).toFixed(fixNum) + "b";
            }
            else if (crc >= 1e6) {
                textTemp = (crc / 1e6).toFixed(fixNum) + "m";
            }
            else if (crc >= 1e3) {
                textTemp = (crc / 1e3).toFixed(fixNum) + "k";
            }
            else {
                textTemp = Math.round(crc).toString();
            }
            return textTemp;
        }
        static normV2(x, y, o) {
            let m = Math.sqrt(x * x + y * y);
            let nx = x / m;
            let ny = y / m;
            if (Array.isArray(o)) {
                o[0] = nx;
                o[1] = ny;
            }
            else {
                o["x"] = nx;
                o["y"] = ny;
            }
            return m;
        }
        static genArcPoint(orgX, orgY, longAxis, shortAxis) {
            return [
                [orgX, orgY], [orgX + longAxis * (1 - 0.866), orgY + shortAxis * 0.5], [orgX + longAxis * 0.5, orgY + shortAxis * 0.866],
                [orgX + longAxis, orgY + shortAxis], [orgX + longAxis + longAxis * 0.5, orgY + shortAxis * 0.866], [orgX + longAxis + longAxis * 0.866, orgY + shortAxis * 0.5],
                [orgX + longAxis * 2, orgY], [orgX + longAxis + longAxis * 0.866, orgY - shortAxis * 0.5], [orgX + longAxis + longAxis * 0.5, orgY - shortAxis * 0.866],
                [orgX + longAxis, orgY - shortAxis], [orgX + longAxis * 0.5, orgY - shortAxis * 0.866], [orgX + longAxis * (1 - 0.866), orgY - shortAxis * 0.5],
                [orgX, orgY], [orgX - longAxis * (1 - 0.866), orgY + shortAxis * 0.5], [orgX - longAxis * 0.5, orgY + shortAxis * 0.866],
                [orgX - longAxis, orgY + shortAxis], [orgX - longAxis - longAxis * 0.5, orgY + shortAxis * 0.866], [orgX - longAxis - longAxis * 0.866, orgY + shortAxis * 0.5],
                [orgX - longAxis * 2, orgY], [orgX - longAxis - longAxis * 0.866, orgY - shortAxis * 0.5], [orgX - longAxis - longAxis * 0.5, orgY - shortAxis * 0.866],
                [orgX - longAxis, orgY - shortAxis], [orgX - longAxis * 0.5, orgY - shortAxis * 0.866], [orgX - longAxis * (1 - 0.866), orgY - shortAxis * 0.5],
            ];
        }
        static checkNewDay(oldTime) {
            if (oldTime == 0) {
                return true;
            }
            let oldDate = new Date(oldTime);
            let oy = oldDate.getFullYear();
            let om = oldDate.getMonth();
            let od = oldDate.getDate();
            let curTime = Date.now();
            let nowDate = new Date();
            let ny = nowDate.getFullYear();
            let nm = nowDate.getMonth();
            let nd = nowDate.getDate();
            return (curTime > oldTime) && (ny > oy || nm > om || nd > od);
        }
        static genConf(arr) {
            let rs = {};
            let map = rs["map"] = {};
            rs["arr"] = arr;
            for (let v of arr) {
                map[v.id] = v;
            }
            return rs;
        }
        static custBackOut(s = 1.70158) {
            return (t, b, c, d) => {
                return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;
            };
        }
        static vibrate() {
            TJ.API.Vibrate.Short();
        }
        static getWord(id) {
            return LC.LangConf.map[id][Formula.lang];
        }
        static setSkin(img, id) {
            if (TJ.Engine.RuntimeInfo.platform == TJ.Define.Platform.Android && Formula.lang != "cn") {
                img.skin = "langPic/" + Formula.lang + "/" + LC.LangConf.map[id].name + ".png";
            }
        }
    }
    Util.lim = 1e-5;
    Util.deg2rad = Math.PI / 180;
    Util.rad2deg = 180 / Math.PI;

    let _G = window["G"];
    if (!_G) {
        _G = {};
        window["G"] = _G;
    }
    let G = _G;
    let _F = window["F"];
    if (!_F) {
        _F = {};
        window["F"] = _F;
    }
    let F = _F;
    var Core;
    (function (Core) {
        let Event;
        (function (Event) {
            class Mgr {
                constructor() {
                    this.dispatcher = new Laya.EventDispatcher();
                }
                init(segment) {
                    Mgr.notify("preloadStep", segment);
                    GameMgr.autoLoadNext();
                }
                static reg(type, caller, listener) {
                    if (!caller) {
                        console.error("caller must exist!");
                    }
                    Mgr.I.dispatcher.on(type.toString(), caller, listener);
                }
                static notify(type, args) {
                    Mgr.I.dispatcher.event(type.toString(), args);
                }
                static off(type, caller, listener) {
                    Mgr.I.dispatcher.off(type.toString(), caller, listener);
                }
                static offAll(type) {
                    Mgr.I.dispatcher.offAll(type.toString());
                }
                static offCaller(caller) {
                    Mgr.I.dispatcher.offAllCaller(caller);
                }
            }
            Event.Mgr = Mgr;
        })(Event = Core.Event || (Core.Event = {}));
        let Tween;
        (function (Tween) {
            class Tweener {
                constructor() {
                    this.id = Tweener.internalId;
                    this.inParams = [];
                    this.outParams = [];
                }
                static get internalId() {
                    return ++(Tweener._internalId);
                }
                set factor(v) {
                    if (this.update) {
                        this._factor = v;
                        this.update.runWith(this);
                    }
                }
                get factor() {
                    return this._factor;
                }
                beforeRun() {
                    this.pause = false;
                    for (let v of this.inParams) {
                        v.length = 0;
                    }
                    for (let v of this.outParams) {
                        v.length = 0;
                    }
                    this.delayCounter = 0;
                }
                play() {
                    this.beforeRun();
                    this.counter = 0;
                    this.factor = 0;
                    this.dir = true;
                }
                reverse(fromNow = false) {
                    if (this.loopDir == 0) {
                        this.beforeRun();
                        if (fromNow) {
                            this.counter = this.duration * this.factor;
                        }
                        else {
                            this.counter = this.duration;
                            this.factor = 1;
                        }
                        this.dir = false;
                    }
                }
                discard() {
                    this.hasClear = true;
                    if (this.complete) {
                        this.complete.recover();
                        this.complete = null;
                    }
                    if (this.update) {
                        this.update.recover();
                        this.update = null;
                    }
                }
                stop() {
                    this.pause = true;
                }
                _conf(duration, update, complete, loopDir, auto, ignoreTime, ease, delay) {
                    this.duration = duration;
                    this.update = update;
                    this.complete = complete;
                    this.loopDir = loopDir;
                    this.autoClear = auto;
                    this.ignoreTime = ignoreTime;
                    this.ease = ease;
                    this.delay = delay;
                    this.hasClear = false;
                    this.pause = true;
                }
                _step(dt) {
                    if (this.pause || this.hasClear) {
                        return;
                    }
                    if (this.delayCounter < this.delay) {
                        this.delayCounter += dt;
                        return;
                    }
                    if (this.dir) {
                        this.counter += dt;
                        let ratio = Util.clamp(this.counter / this.duration, 0, 1);
                        if (ratio == 1) {
                            this.factor = 1;
                        }
                        else {
                            this.factor = this.ease(this.counter, 0, 1, this.duration);
                        }
                        if (this.factor == 1) {
                            if (this.loopDir == 0) {
                                this.pause = true;
                                this.complete && this.complete.run();
                                this.autoClear && this.discard();
                            }
                            else if (this.loopDir == 1) {
                                this.dir = true;
                                this.counter = 0;
                                this.delayCounter = 0;
                            }
                            else if (this.loopDir == 2) {
                                this.dir = false;
                                this.counter = this.duration;
                                this.delayCounter = 0;
                            }
                        }
                    }
                    else {
                        this.counter -= dt;
                        let ratio = Util.clamp(this.counter / this.duration, 0, 1);
                        if (ratio == 0) {
                            this.factor = 0;
                        }
                        else {
                            this.factor = this.ease(this.counter, 0, 1, this.duration);
                        }
                        if (this.factor == 0) {
                            if (this.loopDir == 0) {
                                this.pause = true;
                                this.complete && this.complete.run();
                                this.autoClear && this.discard();
                            }
                            else if (this.loopDir == 1) {
                                console.error("unvalid tween");
                            }
                            else if (this.loopDir == 2) {
                                this.dir = true;
                                this.counter = 0;
                                this.delayCounter = 0;
                            }
                        }
                    }
                }
                getPG(groupName, group) {
                    let params = this[groupName];
                    let rs = params[group];
                    if (!rs) {
                        rs = [];
                        params[group] = rs;
                    }
                    return rs;
                }
            }
            Tweener._internalId = 0;
            Tween.Tweener = Tweener;
            class Mgr {
                constructor() {
                    this.idle = [];
                    this.busy = {};
                    this.clearCounter = 0;
                }
                init(segment) {
                    Laya.timer.frameLoop(1, this, this._update);
                    EventMgr.reg("pause", this, this.gamePause);
                    this.pause = false;
                    EventMgr.notify("preloadStep", segment);
                    GameMgr.autoLoadNext();
                }
                gamePause(state) {
                    this.pause = state;
                }
                _update() {
                    let busy = this.busy;
                    for (let id in busy) {
                        let t = busy[id];
                        if (!this.pause || t.ignoreTime) {
                            t._step(Laya.timer.delta);
                        }
                    }
                    this.clearCounter += 1;
                    if (this.clearCounter == 10) {
                        this.clearCounter = 0;
                        for (let id in busy) {
                            let t = busy[id];
                            if (t.hasClear) {
                                delete busy[id];
                                this.idle.push(t);
                            }
                        }
                    }
                }
                doTween(duration, update, complete, loopDir, auto, ignoreTime, ease, delay) {
                    let t = this.idle.pop() || new Tweener();
                    t._conf(duration, update, complete, loopDir, auto, ignoreTime, ease, delay);
                    this.busy[t.id] = t;
                    return t;
                }
                static tweenTiny(duration, caller, update, complete, ignoreTime = false, ease = Laya.Ease.linearNone, delay = 0) {
                    let t = Mgr.I.doTween(duration, Laya.Handler.create(caller, update, null, false), complete && Laya.Handler.create(caller, complete, null, false), 0, true, ignoreTime, ease, delay);
                    t.play();
                }
                static tweenCust(duration, caller, update, complete, ignoreTime = false, ease = Laya.Ease.linearNone, delay = 0) {
                    return Mgr.I.doTween(duration, Laya.Handler.create(caller, update, null, false), complete && Laya.Handler.create(caller, complete, null, false), 0, false, ignoreTime, ease, delay);
                }
                static tweenLoop(duration, caller, update, loopDir = 1, delay = 0, ease = Laya.Ease.linearNone, ignoreTime = false) {
                    return Mgr.I.doTween(duration, Laya.Handler.create(caller, update, null, false), null, loopDir, false, ignoreTime, ease, delay);
                }
                static _getFactor(t) {
                    return Number(t.factor.toFixed(4));
                }
                static lerp_Num(start, end, t, group = 0) {
                    let inParams = t.getPG("inParams", group);
                    if (inParams.length == 0) {
                        inParams[0] = start;
                        inParams[1] = end;
                    }
                    let outParams = t.getPG("outParams", group);
                    outParams[0] = inParams[0] + (inParams[1] - inParams[0]) * Mgr._getFactor(t);
                }
                static lerp_Vec2(start, end, t, group = 0) {
                    let inParams = t.getPG("inParams", group);
                    if (inParams.length == 0) {
                        inParams[0] = start.x;
                        inParams[1] = end.x - start.x;
                        inParams[2] = start.y;
                        inParams[3] = end.y - start.y;
                    }
                    let outParams = t.getPG("outParams", group);
                    let f = Mgr._getFactor(t);
                    outParams[0] = inParams[0] + inParams[1] * f;
                    outParams[1] = inParams[2] + inParams[3] * f;
                }
            }
            Tween.Mgr = Mgr;
        })(Tween = Core.Tween || (Core.Tween = {}));
        let Resource;
        (function (Resource) {
            class Mgr {
                init(segment) {
                    GameMgr.autoLoadNext();
                }
                doGetLh(keyName) {
                    this.willLoad = keyName;
                    this.poolSign = "LH_" + keyName;
                    let lh = Laya.Pool.getItemByCreateFun(this.poolSign, this.createFun, this);
                    lh.active = true;
                    return lh;
                }
                createFun() {
                    let inst = Laya.Loader.getRes(`res3d/${this.willLoad}.lh`).clone();
                    inst["_orgName"] = this.poolSign;
                    return inst;
                }
                static getLh(keyName) {
                    return Mgr.I.doGetLh(keyName);
                }
                static recycleLh(inst, clearComs = false) {
                    clearComs && inst["_destroyAllComponent"].call(inst);
                    inst.removeSelf();
                    inst.active = false;
                    Laya.Pool.recover(inst["_orgName"], inst);
                }
            }
            Resource.Mgr = Mgr;
            class BaseObj {
                constructor() {
                    this._isInit = false;
                }
                get trans() {
                    return this.obj.transform;
                }
                recycle() {
                    if (!this._isRecycle) {
                        this._isRecycle = true;
                        Laya.timer.clearAll(this);
                        this.onRecycle();
                        ObjPool._recycle(this);
                    }
                }
                useUpdate() {
                    Laya.timer.frameLoop(1, this, this.onUpdate);
                }
                onUpdate() { }
                onRecycle() {
                    this.obj && ResourceMgr.recycleLh(this.obj);
                }
            }
            Resource.BaseObj = BaseObj;
            class ObjPool {
                static get interId() {
                    ObjPool._id += 1;
                    return ObjPool._id;
                }
                static get(cls, args) {
                    let clsName = cls["_cls"];
                    if (!clsName) {
                        console.error("_cls not implement");
                        return;
                    }
                    let branch = ObjPool.map[clsName];
                    if (!branch) {
                        ObjPool.map[clsName] = branch = {};
                    }
                    let item = Laya.Pool.getItemByClass(clsName, cls);
                    if (!item._isInit) {
                        item._clsName = clsName;
                        item._mid = ObjPool.interId;
                        item.onInit();
                        item._isInit = true;
                    }
                    branch[item._mid] = item;
                    item._isRecycle = false;
                    item.onRecover(args);
                    return item;
                }
                static _recycle(obj) {
                    let branch = ObjPool.map[obj._clsName];
                    delete branch[obj._mid];
                    Laya.Pool.recover(obj._clsName, obj);
                }
                static recycleAll() {
                    for (let clsName in ObjPool.map) {
                        let branch = ObjPool.map[clsName];
                        for (let id in branch) {
                            branch[id].recycle();
                        }
                        branch = {};
                    }
                }
            }
            ObjPool.map = {};
            ObjPool._id = 0;
            Resource.ObjPool = ObjPool;
        })(Resource = Core.Resource || (Core.Resource = {}));
        let Data;
        (function (Data) {
            class Mgr {
                constructor() {
                    this.playerData = {};
                }
                init(segment) {
                    let keysInfo = Formula.playerLocalKeys;
                    let gameId = this.doGetValue("gameId");
                    Formula.fstPlay = gameId != keysInfo.gameId;
                    if (Formula.fstPlay) {
                        Laya.LocalStorage.clear();
                        for (let k in keysInfo) {
                            this.doSetValue(k, this.getDf(keysInfo[k]));
                        }
                    }
                    else {
                        let version = this.doGetValue("version");
                        let compare = keysInfo.version;
                        if (version < compare) {
                            this.doSetValue("version", compare);
                            for (let k in keysInfo) {
                                let localVal = this.doGetValue(k);
                                if (localVal == null) {
                                    this.doSetValue(k, this.getDf(keysInfo[k]));
                                }
                                else {
                                    this.playerData[k] = localVal;
                                }
                            }
                        }
                        else {
                            for (let k in keysInfo) {
                                this.playerData[k] = this.doGetValue(k);
                            }
                        }
                    }
                    (Formula.maxEnergy > 0) && new Energy(Formula.recoverEnergyTs, Formula.maxEnergy);
                    let orgLC = LC;
                    let pathList = [];
                    let keyList = [];
                    for (let k in orgLC) {
                        pathList.push(`config/${orgLC[k]._file}.json`);
                        keyList.push(k);
                    }
                    let lastValue = null;
                    let onPrg = Laya.Handler.create(null, (v) => {
                        let delta = lastValue == null ? v : (v - lastValue);
                        EventMgr.notify("preloadStep", delta * segment);
                        lastValue = v;
                    }, null, false);
                    let onCpl = Laya.Handler.create(null, (res) => {
                        for (let i = 0, len = pathList.length; i < len; i++) {
                            let jsonObj = Laya.Loader.getRes(pathList[i].url);
                            let dataSt = orgLC[keyList[i]];
                            dataSt.arr = jsonObj;
                            if (jsonObj[0].id) {
                                for (let v of jsonObj) {
                                    dataSt.map[v.id] = v;
                                }
                            }
                        }
                        onPrg.recover();
                        GameMgr.autoLoadNext();
                    });
                    Laya.loader.create(pathList, onCpl, onPrg);
                }
                getDf(value) {
                    if (value == "__ts__") {
                        return Date.now();
                    }
                    else if (typeof (value) == "function") {
                        return value();
                    }
                    else {
                        return value;
                    }
                }
                doGetValue(key) {
                    let v = Laya.LocalStorage.getItem(key);
                    if (v === "") {
                        return "";
                    }
                    else {
                        return JSON.parse(v);
                    }
                }
                doSetValue(key, value) {
                    if (value === "" || value === null) {
                        console.error("save data error, key is: ", key);
                    }
                    let curValue = this.playerData[key];
                    let valid = curValue != value;
                    if (valid) {
                        this.playerData[key] = value;
                        Laya.LocalStorage.setItem(key, JSON.stringify(value));
                    }
                    return valid;
                }
                doSetObjItem(key, itemKey, value) {
                    let obj = this.playerData[key];
                    let curValue = obj[itemKey];
                    if (curValue != value) {
                        obj[itemKey] = value;
                        Laya.LocalStorage.setItem(key, JSON.stringify(obj));
                    }
                }
                doDeltaNum(key, delta) {
                    if (delta != 0) {
                        let curValue = this.playerData[key];
                        curValue += delta;
                        this.playerData[key] = curValue;
                        Laya.LocalStorage.setItem(key, JSON.stringify(curValue));
                    }
                }
                doSetArray(key, value) {
                    let curValue = this.playerData[key];
                    if (value != curValue) {
                        curValue.length = 0;
                        for (let i = 0, len = value.length; i < len; i++) {
                            curValue[i] = value[i];
                        }
                    }
                    Laya.LocalStorage.setItem(key, JSON.stringify(curValue));
                }
                doSetObj(key) {
                    Laya.LocalStorage.setItem(key, JSON.stringify(this.playerData[key]));
                }
                static setValue(key, value) {
                    return DataMgr.I.doSetValue(key, value);
                }
                static setObjItem(key, itemKey, value) {
                    Mgr.I.doSetObjItem(key, itemKey, value);
                }
                static deltaNum(key, value) {
                    Mgr.I.doDeltaNum(key, value);
                }
                static setArray(key, value) {
                    Mgr.I.doSetArray(key, value);
                }
                static setObject(key) {
                    Mgr.I.doSetObj(key);
                }
                static getPlayerData(key) {
                    let data = Mgr.I.playerData;
                    if (key) {
                        return data[key];
                    }
                    else {
                        return data;
                    }
                }
            }
            Data.Mgr = Mgr;
            class Energy {
                constructor(itvTs, max, onceAdd = 1) {
                    this.dataKey = "energy";
                    this.tsKey = "energyTs";
                    this.updateTs = 1000;
                    this.itv = itvTs;
                    this.onceAdd = onceAdd;
                    this.max = max;
                    let now = Date.now();
                    let times = Math.floor((now - this.energyTs) / itvTs);
                    Mgr.setValue(this.dataKey, Util.clamp(this.value + times * onceAdd, 0, this.max));
                    Mgr.setValue(this.tsKey, this.energyTs + itvTs * times);
                    let elapse = (this.value < this.max) ? (now - this.energyTs) : 0;
                    this.counter = itvTs - elapse;
                    Laya.timer.loop(this.updateTs, this, this.scdUpdate);
                }
                get value() {
                    return Mgr.getPlayerData(this.dataKey);
                }
                get energyTs() {
                    return Mgr.getPlayerData(this.tsKey);
                }
                scdUpdate() {
                    if (this.value < this.max) {
                        let now = Date.now();
                        let cutTs = this.lastCounter ? (now - this.lastCounter) : this.updateTs;
                        this.lastCounter = now;
                        this.counter -= cutTs;
                        if (this.counter > -80 && this.counter < 80) {
                            this.counter = 0;
                        }
                        if (this.counter <= 0) {
                            let exceed = -1 * this.counter;
                            let add = Math.floor(exceed / this.itv);
                            let elapse = exceed - add * this.itv;
                            this.counter = this.itv - elapse;
                            let _value = this.value + add + 1;
                            if (_value >= this.max) {
                                _value = this.max;
                                this.lastCounter = null;
                            }
                            Mgr.setValue(this.dataKey, _value);
                            Mgr.setValue(this.tsKey, now - elapse);
                        }
                        EventMgr.notify("energyTick", this.counter);
                    }
                }
            }
        })(Data = Core.Data || (Core.Data = {}));
        let Scene;
        (function (Scene) {
            class Mgr {
                constructor() {
                    this.lastOffset = new Laya.Point();
                    this.efxList = [];
                    this.maxTimeMap = [];
                }
                init(segment) {
                    this.nodeMap = {};
                    let sceneInfo = Formula.startScene;
                    if (sceneInfo.path == "") {
                        EventMgr.notify("preloadStep", segment);
                        GameMgr.autoLoadNext();
                    }
                    else {
                        let onCpl = Laya.Handler.create(null, (scene) => {
                            this.root = Laya.stage.addChildAt(scene, 0);
                            this.setMap(sceneInfo.nodeConf);
                            EventMgr.notify("preloadStep", segment);
                            GameMgr.autoLoadNext();
                        });
                        Laya.Scene.load(sceneInfo.path, onCpl);
                    }
                    Laya.timer.frameLoop(1, this, this.update);
                }
                setMap(nodeConf) {
                    for (let v of nodeConf) {
                        if (typeof (v) == "string") {
                            let node = this.nodeMap[v] = this.root.addChild(new Laya.Sprite());
                            node.name = v;
                        }
                        else {
                            let node = this.root;
                            let arr = v[0].split("/");
                            for (let name of arr) {
                                node = node.getChildByName(name);
                            }
                            this.nodeMap[v[1]] = node;
                        }
                    }
                }
                doCloseScene() {
                    this.nodeMap = {};
                    this.root && this.root.destroy(true);
                    this.root = null;
                }
                doLoadScene(sceneInfo, onCpl) {
                    this.doCloseScene();
                    if (sceneInfo.path == "") {
                        onCpl();
                    }
                    else {
                        Laya.Scene.load(sceneInfo.path, Laya.Handler.create(null, (scene) => {
                            this.root = Laya.stage.addChildAt(scene, 0);
                            this.setMap(sceneInfo.nodeConf);
                            onCpl();
                        }));
                    }
                }
                update() {
                    let dt = Laya.timer.delta;
                    if (this.efxList.length > 0) {
                        for (let i = 0; i < this.efxList.length; i++) {
                            let info = this.efxList[i];
                            info[2] += dt;
                            if (info[2] >= info[1]) {
                                info[3] && info[3]();
                                ResourceMgr.recycleLh(info[0]);
                                this.efxList.splice(i, 1);
                                i--;
                            }
                        }
                    }
                }
                doAddLittleEfx(name, x, y, z, parent, onCpl, joinPlay) {
                }
                static loadScene(sceneInfo, onCpl) {
                    Mgr.I.doLoadScene(sceneInfo, onCpl);
                }
                static shakeNode(a = 0.05, t = 200, node = Mgr.getNode("Camera")) {
                }
                static getNode(name) {
                    return name ? Mgr.I.nodeMap[name] : Mgr.I.root;
                }
                static addObj(src, parentName) {
                    Mgr.getNode(parentName).addChild(src);
                    return src;
                }
                static addEfx(name, x = 0, y = 0, z = 0, parent, onCpl, joinPlay = true) {
                    return Mgr.I.doAddLittleEfx(name, x, y, z, parent, onCpl, joinPlay);
                }
            }
            Scene.Mgr = Mgr;
        })(Scene = Core.Scene || (Core.Scene = {}));
        let UI;
        (function (UI) {
            let OpenType;
            (function (OpenType) {
                OpenType[OpenType["Once"] = 1] = "Once";
                OpenType[OpenType["Unique"] = 2] = "Unique";
                OpenType[OpenType["Attach"] = 3] = "Attach";
                OpenType[OpenType["Promo"] = 4] = "Promo";
                OpenType[OpenType["Top"] = 5] = "Top";
                OpenType[OpenType["Debug"] = 6] = "Debug";
            })(OpenType = UI.OpenType || (UI.OpenType = {}));
            class UIBase extends Laya.Script {
                constructor() {
                    super(...arguments);
                    this._openType = OpenType.Unique;
                    this._forceShowPromo = false;
                    this._fadeIn = true;
                    this._updateFuncs = [];
                }
                get obj() {
                    return this.owner;
                }
                get uiName() {
                    return this["constructor"]["UINAME"];
                }
                onInit() { }
                onShow(args) { }
                onHide() { }
                onRefresh() { }
                update() { }
                onAwake() {
                    this._taRecoard("Load");
                }
                onStart() {
                    this._taRecoard("Start");
                }
                onEnable() {
                    this._taRecoard("Enable");
                }
                onDisable() {
                    this._taRecoard("Disable");
                }
                onDestroy() {
                    this._taRecoard("Destroy");
                }
                _taRecoard(name) {
                    if (this._openType <= 3) {
                    }
                }
                _setLiving(state) {
                    this._living = this.obj.visible = this.obj.active = state;
                }
                onUpdate() {
                    for (let f of this._updateFuncs) {
                        f();
                    }
                    this.update();
                }
                vars(name) {
                    return this.owner[name];
                }
                btnEv(name, func, caller = this, sound = true, pressAnim = true) {
                    let btn = this.vars(name);
                    UIMgr.btnEv(btn, func, caller, sound, pressAnim);
                    return btn;
                }
                static btnZoom(e) {
                    if (!e.target["_inScale"]) {
                        e.target["_inScale"] = true;
                        e.target["_tScale"].play();
                    }
                }
                static btnShrink(e) {
                    if (e.target["_inScale"]) {
                        e.target["_inScale"] = false;
                        e.target["_tScale"].reverse(true);
                    }
                }
                initPrg(name, isH = false, dfValue = 0, moveFg = false) {
                    let prg = this.owner[name].addComponent(ProgressBar);
                    prg.isH = isH;
                    prg.RefreshHN();
                    prg.moveFg = moveFg;
                    prg.setValue(dfValue);
                    return prg;
                }
                initTab(name, onTabChange, onTabView, fst = 0, isCancel = false) {
                    let tab = this.owner[name].addComponent(PageTab);
                    tab.init(onTabChange, onTabView, fst, isCancel);
                    return tab;
                }
                initSmartNum(name, fmt, duration) {
                    let sn = this.owner[name].addComponent(SmartNumber);
                    sn.init(fmt, duration);
                    return sn;
                }
                floatLight(name, sx, ex, speed = 12) {
                    let node = this.owner[name];
                    let floatObj = node.getChildByName("FL");
                    floatObj.x = sx;
                    let state = 1;
                    let counter = 0;
                    let updateFunc = () => {
                        if (state == 0) {
                            counter += 0.02;
                            if (counter > 2) {
                                counter = 0;
                                state = 1;
                            }
                        }
                        else {
                            let x = floatObj.x + speed;
                            if (x > ex) {
                                x = sx;
                                state = 0;
                            }
                            floatObj.x = x;
                        }
                    };
                    this._updateFuncs.push(updateFunc);
                }
                rotateImgByName(name, speed = -1) {
                    this.rotateImgByObj(this.owner[name], speed);
                }
                rotateImgByObj(img, speed = -1) {
                    let updateFunc = () => {
                        img.rotation += speed;
                    };
                    this._updateFuncs.push(updateFunc);
                }
                fadeImgByName(name, maxSize = 1.5, speed = 0.008) {
                    this.fadeImgByObj(this.owner[name], maxSize, speed);
                }
                fadeImgByObj(img, maxSize = 1.5, speed = 0.008) {
                    let size = 1;
                    let alpha;
                    let updateFunc = () => {
                        size += speed;
                        alpha = 1 - (size - 1) / (maxSize - 1);
                        if (size >= maxSize) {
                            size = 1;
                            alpha = 1;
                        }
                        img.scale(size, size);
                        img.alpha = alpha;
                    };
                    this._updateFuncs.push(updateFunc);
                }
                zoomImgByName(name, speed = 0.005, range = 0.1) {
                    this.zoomImgByObj(this.owner[name], speed, range);
                }
                zoomImgByObj(img, speed = 0.005, range = 0.1) {
                    let state = 1;
                    let size = 1;
                    let maxSize = size + range;
                    let minSize = size - range;
                    let updateFunc = () => {
                        if (state == 1) {
                            size += speed;
                            if (size >= maxSize) {
                                size = maxSize;
                                state = 2;
                            }
                        }
                        else if (state == 2) {
                            size -= speed;
                            if (size <= minSize) {
                                size = minSize;
                                state = 1;
                            }
                        }
                        img.scale(size, size);
                    };
                    this._updateFuncs.push(updateFunc);
                }
                hide() {
                    UIMgr.hide(this.uiName);
                }
                createRenderScene3d(camPx, camPy, camRx, scale = 10, siblingIdx = -1) {
                    let s3d = new Laya.Scene();
                    if (siblingIdx != -1) {
                        this.obj.addChildAt(s3d, siblingIdx);
                    }
                    else {
                        this.obj.addChild(s3d);
                    }
                    let cam = s3d.addChild(new Laya.Camera(0, 0.1, 100));
                    cam.orthographic = true;
                    cam.orthographicVerticalSize = scale;
                    cam.clearFlag = Laya.BaseCamera.CLEARFLAG_DEPTHONLY;
                    cam.transform.localPosition.setValue(camPx, camPy, 0);
                    cam.transform.localRotationEulerX = camRx;
                    this["s3d"] = s3d;
                    this["cam"] = cam;
                }
            }
            UI.UIBase = UIBase;
            class Mgr {
                constructor() {
                    this.steps = 2;
                    this.uiMap = {};
                    this.openStack = [];
                    this.uiOffset = 0;
                }
                init(segment) {
                    this.segment = segment / this.steps;
                    Laya.Scene.close("sys/UIInit.scene");
                    this.checkNext();
                    Laya.Scene.open(`sys/UITop.scene`, false, null, Laya.Handler.create(null, (res) => {
                        this.uiTop = res.addComponent(UITop);
                        this.uiTop.onInit();
                        this.uiOffset += 1;
                        if (Formula.debug) {
                            Laya.Scene.open(`sys/UIDebug.scene`, false, null, Laya.Handler.create(null, (res) => {
                                this.uiDebug = res.addComponent(UIDebug);
                                this.uiDebug.onInit();
                                this.uiOffset += 1;
                                this.checkNext();
                            }));
                        }
                        else {
                            this.checkNext();
                        }
                    }));
                }
                checkNext() {
                    EventMgr.notify("preloadStep", this.segment);
                    this.steps--;
                    this.steps == 0 && GameMgr.autoLoadNext();
                }
                doShow(name, args) {
                    let ui = this.uiMap[name];
                    console.log("dasfadsf=>>>>>", `sys/${name}.scene`);
                    if (!ui) {
                        Laya.Scene.open(`sys/${name}.scene`, false, null, Laya.Handler.create(null, (res) => {
                            let cls = G[name];
                            cls["UINAME"] = name;
                            ui = res.addComponent(cls);
                            this.uiMap[name] = ui;
                            ui.onInit();
                            this._show(ui, args);
                        }));
                    }
                    else {
                        this._show(ui, args);
                    }
                }
                _show(ui, args) {
                    let isUnique = false;
                    if (ui._openType == OpenType.Once || ui._openType == OpenType.Unique) {
                        isUnique = true;
                        for (let openedUI of this.openStack) {
                            this._hide(openedUI);
                        }
                        this.openStack.length = 0;
                        this.openStack.push(ui);
                    }
                    else {
                        this.openStack.push(ui);
                    }
                    ui._setLiving(true);
                    let offset = this.uiOffset;
                    if (!this.uiRoot) {
                        this.uiRoot = Laya.stage.getChildAt(0);
                        offset = 0;
                    }
                    let pos = this.uiRoot.numChildren - 1 - offset;
                    this.uiRoot.setChildIndex(ui.owner, pos);
                    if (ui._fadeIn) {
                        TweenMgr.tweenTiny(250, null, (t) => {
                            ui.obj.alpha = t.factor;
                        }, null, true);
                    }
                    ui.onShow(args);
                }
                doHide(name) {
                    for (let i = 0, len = this.openStack.length; i < len; i++) {
                        let ui = this.openStack[i];
                        if (ui.uiName == name) {
                            this.openStack.splice(i, 1);
                            this._hide(ui);
                            break;
                        }
                    }
                }
                doRefreshCurShowing() {
                    for (let ui of this.openStack) {
                        ui.onRefresh();
                    }
                }
                _hide(ui) {
                    if (ui._openType == OpenType.Once) {
                        Laya.Scene.close(ui.obj.url);
                    }
                    else {
                        ui._setLiving(false);
                    }
                    ui.onHide();
                }
                static show(name, args) {
                    Mgr.I.doShow(name, args);
                }
                static hide(name) {
                    Mgr.I.doHide(name);
                }
                static refreshCurShowing() {
                    Mgr.I.doRefreshCurShowing();
                }
                static tip(cont, mode = 0) {
                    Mgr.I.uiTop.showTip(cont, mode);
                }
                static interim1(cb) {
                    Mgr.I.uiTop.showInterim1(cb);
                }
                static interim2(cb) {
                    Mgr.I.uiTop.showInterim2(cb);
                }
                static ctrlWait(state) {
                    Mgr.I.uiTop.ctrlWait(state);
                }
                static ctrlMask(state) {
                    Mgr.I.uiTop.ctrlMask(state);
                }
                static guide(targ) {
                    Mgr.I.uiTop.guide(targ);
                }
                static guideRect(x, y, w, h, sx, sy, ex, ey) {
                    Mgr.I.uiTop.guideRect(x, y, w, h, sx, sy, ex, ey);
                }
                static guideCircle(x, y, radius, sx, sy, ex, ey) {
                    Mgr.I.uiTop.guideCircle(x, y, radius, sx, sy, ex, ey);
                }
                static ctrlGuide(state) {
                    Mgr.I.uiTop.ctrlGuide(state);
                }
                static get(name) {
                    let ui = Mgr.I.uiMap[name];
                    if (ui && ui._living) {
                        return ui;
                    }
                    else {
                        return null;
                    }
                }
                static debugObj(targ) {
                    Mgr.I.uiDebug.bindObj(targ);
                }
                static btnEv(btn, func, caller, sound = true, pressAnim = true) {
                    btn.on(Laya.Event.CLICK, caller, () => {
                        sound && GameMgr.playSound("btn");
                        func.call(caller);
                    });
                    if (pressAnim) {
                        btn.on(Laya.Event.MOUSE_DOWN, UIBase, UIBase.btnZoom);
                        btn.on(Laya.Event.MOUSE_UP, UIBase, UIBase.btnShrink);
                        btn.on(Laya.Event.MOUSE_OUT, UIBase, UIBase.btnShrink);
                        btn["_tScale"] = TweenMgr.tweenCust(100, null, (t) => {
                            let v = 1 + t.factor * 0.04;
                            btn.scale(v, v);
                        }, null, true);
                    }
                }
                static showP(id, args) {
                }
                static hideP(id) {
                }
            }
            UI.Mgr = Mgr;
            class UIDebug extends UIBase {
                constructor() {
                    super(...arguments);
                    this._openType = OpenType.Debug;
                    this.sldList = [];
                }
                get ctrlTrans() {
                    return this.ctrlObj.transform;
                }
                onInit() {
                    this.obj.alpha = 0.5;
                    this.btnEv("BtnSwitch", this.onClick_BtnSwitch);
                    this.uiState = true;
                    this.onClick_BtnSwitch();
                    this.btnEv("BtnExecute", () => {
                        EventMgr.notify("debugExeCmd", this.vars("InputCmd").text);
                    });
                    for (let i = 1; i <= 4; i++) {
                        this.btnEv("Btn" + i, () => {
                            EventMgr.notify("debugBtn" + i);
                        });
                    }
                    this.transTab = this.initTab("RatioGroup", (idx, state) => {
                        this.changeTransOp(idx);
                    }, (child, state, childIdx) => {
                        child.getChildAt(0).skin = state ? "common/ratio2.png" : "common/ratio1.png";
                    });
                    let index = 0;
                    for (let v of ["SldX", "SldY", "SldZ"]) {
                        let sld = this.vars(v);
                        let item = {
                            id: index, sld: sld, sldT: sld.getChildByName("SldT"),
                            rangeT: sld.getChildByName("Range"),
                            min: 0, max: 100
                        };
                        this.sldList.push(item);
                        sld.on(Laya.Event.CHANGE, this, this.onSldChange, [item]);
                        index++;
                    }
                    this.vars("RangeInput").on(Laya.Event.ENTER, this, this.onInputCpl);
                    this.vars("VertionT").text = Formula.version;
                    this._setLiving(true);
                }
                onClick_BtnSwitch() {
                    this.uiState = !this.uiState;
                    this.vars("TransCtrl").visible = this.vars("InputCtrl").visible = this.vars("BtnCtrl").visible = this.uiState;
                }
                onInputCpl(ipt) {
                    UIDebug.OPRange[this.transTab.curIdx] = Number(ipt.text);
                    this.transTab.force(this.transTab.curIdx);
                }
                bindObj(targ) {
                    this.ctrlObj = targ;
                    this.syncTransUIInfo();
                }
                onSldChange(sldItem) {
                    if (this.ctrlObj) {
                        let real = sldItem.min + (sldItem.max - sldItem.min) * sldItem.sld.value / 100;
                        real = Util.precision(real, 2);
                        sldItem.sldT.text = real;
                        if (sldItem.id == 0) {
                            Util.setVec3(this.ctrlTrans, this.opName, real);
                        }
                        else if (sldItem.id == 1) {
                            Util.setVec3(this.ctrlTrans, this.opName, null, real);
                        }
                        else if (sldItem.id == 2) {
                            Util.setVec3(this.ctrlTrans, this.opName, null, null, real);
                        }
                    }
                }
                changeTransOp(idx) {
                    this.opName = UIDebug.OPName[idx];
                    this.range = UIDebug.OPRange[idx];
                    this.vars("RangeInput").text = this.range;
                    this.syncTransUIInfo();
                }
                syncTransUIInfo() {
                    if (this.ctrlObj) {
                        let vec = this.ctrlTrans[this.opName];
                        this.setSldItem(0, vec.x);
                        this.setSldItem(1, vec.y);
                        this.setSldItem(2, vec.z);
                    }
                }
                setSldItem(id, curVal) {
                    let item = this.sldList[id];
                    item.min = Util.precision(curVal - this.range, 2);
                    item.max = Util.precision(curVal + this.range, 2);
                    item.rangeT.text = `${item.min} ~ ${item.max}`;
                    if (item.sld.value == 50) {
                        this.onSldChange(item);
                    }
                    else {
                        item.sld.value = 50;
                    }
                }
            }
            UIDebug.OPName = ["localPosition", "localRotationEuler", "localScale"];
            UIDebug.OPRange = [10, 180, 2];
            UI.UIDebug = UIDebug;
            class UITop extends UIBase {
                constructor() {
                    super(...arguments);
                    this._openType = OpenType.Top;
                    this.cacheSize = new Laya.Point();
                    this.zeroSize = new Laya.Point(0, 0);
                    this.tipList = [];
                }
                onInit() {
                    (this.interim1 = this.vars("Interim1")).visible = false;
                    (this.interim2 = this.vars("Interim2")).visible = false;
                    (this.waitting = this.vars("Waitting")).visible = false;
                    (this.finger = this.vars("Finger")).visible = false;
                    (this.block = this.btnEv("Block", () => { }, null, false)).visible = false;
                    this.lt = this.vars("LT");
                    this.lb = this.vars("LB");
                    this.rt = this.vars("RT");
                    this.rb = this.vars("RB");
                    for (let i = 0; i < 3; i++) {
                        let item = this.vars("Tip" + i).addComponent(TipItem);
                        item.init(this.tipList);
                        this.tipList.push(item);
                    }
                    this.tRot = TweenMgr.tweenLoop(3000, this, this.tweenRot, 1);
                    this.w1 = this.vars("W1");
                    this.w2 = this.vars("W2");
                    this._setLiving(true);
                }
                showTip(cont, mode) {
                    let item = this.tipList.pop();
                    if (item) {
                        !mode ? item.showV(cont) : item.showH(cont);
                    }
                }
                showInterim1(cb) {
                    this.onCpl = cb;
                    this.interim1.visible = this.block.visible = true;
                    TweenMgr.tweenTiny(300, this, this.tweenAlpha, this.tweenAlphaCpl, true);
                }
                tweenAlpha(t) {
                    this.interim1.alpha = t.factor;
                }
                tweenAlphaCpl() {
                    if (this.onCpl) {
                        this.onCpl();
                        this.onCpl = null;
                    }
                    TweenMgr.tweenTiny(500, this, this.tweenAlpha2, this.tweenAlphaCpl2, true, Laya.Ease.linearNone, 200);
                }
                tweenAlpha2(t) {
                    this.interim1.alpha = 1 - t.factor;
                }
                tweenAlphaCpl2() {
                    this.interim1.visible = this.block.visible = false;
                }
                showInterim2(cb) {
                    this.onCpl = cb;
                    this.interim2.visible = this.block.visible = true;
                    this.cacheSize.x = Laya.stage.width * 0.6;
                    this.cacheSize.y = Laya.stage.height * 0.6;
                    TweenMgr.tweenTiny(300, this, this.tweenScale, this.tweenScaleCpl, true);
                }
                tweenScale(t) {
                    TweenMgr.lerp_Vec2(this.zeroSize, this.cacheSize, t);
                    let w = t.outParams[0][0];
                    let h = t.outParams[0][1];
                    this.lt.size(w, h);
                    this.lb.size(w, h);
                    this.rt.size(w, h);
                    this.rb.size(w, h);
                }
                tweenScaleCpl() {
                    if (this.onCpl) {
                        this.onCpl();
                        this.onCpl = null;
                    }
                    TweenMgr.tweenTiny(400, this, this.tweenScale2, this.tweenScaleCpl2, true, Laya.Ease.linearNone, 250);
                }
                tweenScale2(t) {
                    TweenMgr.lerp_Vec2(this.cacheSize, this.zeroSize, t);
                    let w = t.outParams[0][0];
                    let h = t.outParams[0][1];
                    this.lt.size(w, h);
                    this.lb.size(w, h);
                    this.rt.size(w, h);
                    this.rb.size(w, h);
                }
                tweenScaleCpl2() {
                    this.interim2.visible = this.block.visible = false;
                }
                ctrlWait(state) {
                    if (state) {
                        this.waitting.visible = this.block.visible = true;
                        this.tRot.play();
                    }
                    else {
                        TweenMgr.tweenTiny(200, this, this.tweenWaitAlpha, this.tweenWaitAlphaCpl, true, Laya.Ease.linearNone, 300);
                    }
                }
                tweenWaitAlpha(t) {
                    this.waitting.alpha = 1 - t.factor;
                }
                tweenWaitAlphaCpl() {
                    this.tRot.stop();
                    this.waitting.visible = this.block.visible = false;
                }
                tweenRot(t) {
                    this.w1.rotation = this.w2.rotation = t.factor * 360;
                }
                ctrlMask(state) {
                    this.block.visible = state;
                }
                _initGuide() {
                    let guideContainer = new Laya.Sprite();
                    Laya.stage.addChild(guideContainer);
                    guideContainer.cacheAs = "bitmap";
                    let maskArea = new Laya.Sprite();
                    guideContainer.addChild(maskArea);
                    maskArea.alpha = 0.5;
                    maskArea.graphics.drawRect(0, 0, Laya.stage.width, Laya.stage.height, "#000");
                    let interactionArea = new Laya.Sprite();
                    guideContainer.addChild(interactionArea);
                    interactionArea.blendMode = "destination-out";
                    let hitArea = new Laya.HitArea();
                    hitArea.hit.drawRect(0, 0, Laya.stage.width, Laya.stage.height, "#000");
                    guideContainer.hitArea = hitArea;
                    guideContainer.mouseEnabled = true;
                    this.guideContainer = guideContainer;
                    this.hitArea = hitArea;
                    this.interactionArea = interactionArea;
                }
                guideRect(x, y, w, h, sx, sy, ex, ey) {
                    this._before();
                    this.hitArea.unHit.clear();
                    this.hitArea.unHit.drawRect(x, y, w, h, "#000000");
                    this.interactionArea.graphics.clear();
                    this.interactionArea.graphics.drawRect(x, y, w, h, "#000000");
                    this.finger.visible = true;
                    this.finger.pos(sx, sy);
                    this._after(sx, sy, ex, ey);
                }
                guideCircle(x, y, radius, sx, sy, ex, ey) {
                    this._before();
                    this.hitArea.unHit.clear();
                    this.hitArea.unHit.drawCircle(x, y, radius, "#000000");
                    this.interactionArea.graphics.clear();
                    this.interactionArea.graphics.drawCircle(x, y, radius, "#000000");
                    this.finger.visible = true;
                    this.finger.pos(sx, sy);
                    this._after(sx, sy, ex, ey);
                }
                guide(targ) {
                    this._before();
                    let w = targ.width * 1.1;
                    let h = targ.height * 1.1;
                    let x = targ.x - w * targ.anchorX;
                    let y = targ.y - h * targ.anchorY;
                    let fingerX = targ.x + w * (targ.anchorX - 0.5);
                    let fingerY = targ.y + h * (targ.anchorY - 0.5);
                    this.hitArea.unHit.clear();
                    this.hitArea.unHit.drawRect(x, y, w, h, "#000000");
                    this.interactionArea.graphics.clear();
                    this.interactionArea.graphics.drawRect(x, y, w, h, "#000000");
                    this.finger.visible = true;
                    this.finger.pos(fingerX, fingerX);
                    this._after(fingerX, fingerY, fingerX + 8, fingerY + 8);
                }
                _before() {
                    if (!this.guideContainer) {
                        this._initGuide();
                    }
                    this.ctrlGuide(true);
                }
                _after(sx, sy, ex, ey) {
                    this.tFinger = TweenMgr.tweenLoop(500, null, (t) => {
                        TweenMgr.lerp_Num(sx, ex, t, 0);
                        TweenMgr.lerp_Num(sy, ey, t, 1);
                        this.finger.pos(t.outParams[0][0], t.outParams[1][0]);
                    }, 2);
                    this.tFinger.play();
                }
                ctrlGuide(state) {
                    if (this.guideContainer) {
                        this.finger.visible = this.guideContainer.visible = state;
                    }
                    if (this.tFinger) {
                        this.tFinger.discard();
                        this.tFinger = null;
                    }
                }
            }
            UI.UITop = UITop;
            class UIPromo extends UIBase {
                constructor() {
                    super(...arguments);
                    this._openType = OpenType.Promo;
                    this.p101List = [];
                }
                onInit() {
                    this._setLiving(true);
                    for (let i = 1; i <= 6; i++) {
                        let tmp = this.attachCom(`P101_${i}`, G["P101"]);
                        this.p101List.push(tmp);
                        tmp.shake = true;
                        tmp.autoRefresh = true;
                    }
                    this.p102 = this.attachCom("P102", G["P102"]);
                    this.p103 = this.attachCom("P103", G["P103"]);
                    this.p104 = this.attachCom("P104", G["P104"]);
                    this.p105 = this.attachCom("P105", G["P105"]);
                    this.p106 = this.attachCom("P106", G["P106"]);
                }
                hide() {
                    for (let v of this.p101List) {
                        v.hidePromo();
                    }
                    this.p102.hidePromo();
                    this.p103.hidePromo();
                    this.p104.hidePromo();
                    this.p105.hidePromo();
                    this.p106.hidePromo();
                }
                attachCom(name, com) {
                    let tmp = this.obj[name].addComponent(com);
                    tmp.onInit();
                    return tmp;
                }
                showP(id, args) {
                    if (Formula.banPromo) {
                        return;
                    }
                    if (id == 101) {
                        let showNum = args.length;
                        for (let i = 0; i < this.p101List.length; i++) {
                            let p101 = this.p101List[i];
                            if (i < showNum) {
                                p101.showPromo(args[i]);
                            }
                            else {
                                p101.hidePromo();
                            }
                        }
                    }
                    else {
                        this["p" + id].showPromo();
                    }
                }
                hideP(id) {
                    if (id == 101) {
                        for (let v of this.p101List) {
                            v.hidePromo();
                        }
                    }
                    else {
                        this["p" + id].hidePromo();
                    }
                }
            }
            UI.UIPromo = UIPromo;
            class TipItem extends Laya.Script {
                init(belong) {
                    this.belong = belong;
                    this.contentT = this.owner.getChildAt(0);
                    if (TipItem.initX === undefined) {
                        TipItem.initX = this.obj.x;
                        TipItem.initY = this.obj.y;
                    }
                    this.obj.visible = false;
                    this.tBg = TweenMgr.tweenCust(300, this, this.tweenAlpha, this.tweenAlphaCpl, true);
                    this.tVertPos = TweenMgr.tweenCust(450, this, this.tweenVertPos, this.tweenVertPosCpl, true, Laya.Ease.linearNone, 350);
                    this.tHorzPosIn = TweenMgr.tweenCust(300, this, this.tweenHorzPosIn, this.tweenHorzPosInCpl, true, Laya.Ease.backOut);
                    this.tHorzPosOut = TweenMgr.tweenCust(300, this, this.tweenHorzPosOut, this.clearSelf, true, Laya.Ease.backIn, 350);
                }
                get obj() {
                    return this.owner;
                }
                clearSelf() {
                    this.obj.visible = false;
                    this.belong.push(this);
                }
                tweenAlpha(t) {
                    this.obj.alpha = t.factor;
                }
                tweenAlphaCpl() {
                    if (this.moving == 0) {
                        this.moving = 1;
                        this.tVertPos.play();
                    }
                    else if (this.moving == 2) {
                        this.moving = 0;
                        this.clearSelf();
                    }
                }
                tweenVertPos(t) {
                    TweenMgr.lerp_Num(TipItem.MoveY[0], TipItem.MoveY[1], t);
                    this.obj.y = t.outParams[0][0];
                }
                tweenVertPosCpl() {
                    this.moving = 2;
                    this.tBg.reverse();
                }
                showV(cont) {
                    this.moving = 0;
                    this.contentT.text = cont;
                    this.obj.visible = true;
                    this.obj.pos(TipItem.initX, TipItem.MoveY[0]);
                    this.tBg.play();
                }
                tweenHorzPosIn(t) {
                    TweenMgr.lerp_Num(TipItem.MoveX[0], TipItem.initX, t);
                    this.obj.x = t.outParams[0][0];
                }
                tweenHorzPosInCpl() {
                    this.tHorzPosOut.play();
                }
                tweenHorzPosOut(t) {
                    TweenMgr.lerp_Num(TipItem.initX, TipItem.MoveX[1], t);
                    this.obj.x = t.outParams[0][0];
                }
                showH(cont) {
                    this.contentT.text = cont;
                    this.obj.alpha = 1;
                    this.obj.visible = true;
                    this.obj.pos(TipItem.MoveX[0], TipItem.initY);
                    this.tHorzPosIn.play();
                }
            }
            TipItem.MoveY = [200, 30];
            TipItem.MoveX = [1050, -350];
            class ProgressBar extends Laya.Script {
                get bg() {
                    return this.owner;
                }
                onAwake() {
                    this.fg = this.owner.getChildAt(0);
                    this.mask = this.fg["mask"];
                    this.flag = this.owner.getChildByName("Flag");
                    this.flag && (this.flagInitX = this.flag.x);
                    this.virtualV = 0;
                    this.hl = this.owner.getChildByName("HL");
                    if (this.hl) {
                        this.tHL = TweenMgr.tweenCust(200, this, this.tweenHL);
                        this.hl.alpha = 0;
                    }
                }
                RefreshHN() {
                    if (this.isH) {
                        this.width = this.mask.height;
                    }
                    else {
                        this.width = this.mask.width;
                    }
                }
                aspect() {
                    if (this.isH) {
                        let w = this._value * this.width;
                        if (w < 1)
                            w = 1;
                        if (this.moveFg) {
                            this.fg.height = w;
                        }
                        else {
                            this.mask.height = w;
                        }
                        if (this.flag) {
                            this.flag.x = this.flagInitX + w;
                        }
                    }
                    else {
                        let w = this._value * this.width;
                        if (w < 1)
                            w = 1;
                        if (this.moveFg) {
                            this.fg.width = w;
                        }
                        else {
                            this.mask.width = w;
                        }
                        if (this.flag) {
                            this.flag.x = this.flagInitX + w;
                        }
                    }
                }
                setValue(targetValue) {
                    this.virtualV = 0;
                    this._value = this.targV = Util.clamp(targetValue, 0, 1);
                    this.aspect();
                }
                addValue(delta, tween = false) {
                    if (tween) {
                        this.targV += delta;
                        let left = this.targV - Math.floor(this.targV);
                        if (delta > 0) {
                            if (1 - left < 1e-4) {
                                this.targV = 0;
                            }
                            else {
                                this.targV = left;
                            }
                        }
                        this.virtualV += delta;
                    }
                    else {
                        this._value = Util.clamp(this._value + delta, 0, 1);
                        this.aspect();
                    }
                }
                tweenHL(t) {
                    let v = t.factor;
                    if (v < 0.5) {
                        v *= 2;
                    }
                    else {
                        v = 1 - (v - 0.5) * 2;
                    }
                    this.hl.alpha = v;
                }
                onUpdate() {
                    if (this.virtualV > 0) {
                        let delta = 0.01;
                        let vv = this.virtualV - delta;
                        if (vv <= 0) {
                            delta = this.virtualV;
                            vv = 0;
                        }
                        this.virtualV = vv;
                        let _v = this._value + delta;
                        if ((_v >= 1) || (this.virtualV == 0 && this.targV == 0 && _v != 0)) {
                            _v = 0;
                            this.hl && this.tHL.play();
                        }
                        this._value = _v;
                        this.aspect();
                    }
                }
            }
            UI.ProgressBar = ProgressBar;
            class PageTab extends Laya.Script {
                get curIdx() {
                    return this._curIdx;
                }
                set curIdx(value) {
                    if (this.isCancel) {
                        if (this._curIdx == value) {
                            this.onTabView(this.owner.getChildAt(this._curIdx), false, this._curIdx);
                            this.onTabChange(this._curIdx, false);
                            this._curIdx = -1;
                        }
                        else {
                            this.doChangeTab(value);
                        }
                    }
                    else {
                        if (this._curIdx != value) {
                            this.doChangeTab(value);
                        }
                    }
                }
                doChangeTab(value) {
                    this._curIdx != -1 && this.onTabView(this.owner.getChildAt(this._curIdx), false, this._curIdx);
                    this._curIdx = value;
                    this.onTabView(this.owner.getChildAt(this._curIdx), true, this._curIdx);
                    this.onTabChange(this._curIdx, true);
                }
                init(onTabChange, onTabView, fst, isCancel) {
                    this.onTabChange = onTabChange;
                    this.onTabView = onTabView;
                    this.isCancel = isCancel;
                    this._curIdx = fst;
                    for (let i = 0; i < this.owner.numChildren; i++) {
                        let child = this.owner.getChildAt(i);
                        child.on(Laya.Event.CLICK, null, () => {
                            this.curIdx = i;
                        });
                        this.onTabView(child, i == fst, i);
                    }
                    if (fst != -1) {
                        this.onTabChange(fst, true);
                    }
                }
                force(idx) {
                    if (idx == -1 && this.isCancel) {
                        if (this._curIdx != -1) {
                            this.onTabView(this.owner.getChildAt(this._curIdx), false, this._curIdx);
                            this._curIdx = -1;
                        }
                    }
                    else {
                        if (this._curIdx == idx) {
                            this.onTabChange(idx, true);
                        }
                        else {
                            this.doChangeTab(idx);
                        }
                    }
                }
            }
            UI.PageTab = PageTab;
            class SmartNumber extends Laya.Script {
                set color(colorStr) {
                    this.nt.color = colorStr;
                }
                init(fmt = this.dfFmt, duration = 200) {
                    this.fmt = fmt;
                    this.nt = this.owner;
                    let hw = this.nt.width * 0.5;
                    let hh = this.nt.height * 0.5;
                    this.nt.pivot(hw, hh);
                    this.nt.pos(this.nt.x + hw, this.nt.y + hh);
                    this.tScale = TweenMgr.tweenCust(duration, this, this.tweenScale, this.tweenScaleCpl, true);
                }
                dfFmt(v) {
                    return v;
                }
                resetNum(num) {
                    this.counter = 0;
                    this.targV = this.curV = num;
                    this.nt.text = this.fmt(num);
                }
                setNum(num) {
                    this.targV = num;
                    this.tScale.play();
                }
                addNum(delta) {
                    this.targV += delta;
                    this.tScale.play();
                }
                setNumFrom(num, from) {
                    this.resetNum(from);
                    this.setNum(num);
                }
                tweenScale(t) {
                    let v;
                    if (t.factor < 0.5) {
                        v = 1 + 0.3 * t.factor / 0.5;
                    }
                    else {
                        v = 1.3 - (t.factor / 0.5 - 1) * 0.3;
                    }
                    this.nt.scale(v, v);
                }
                tweenScaleCpl() {
                    this.nt.scale(1, 1);
                }
                onUpdate() {
                    if (this.curV != this.targV) {
                        this.counter += Laya.timer.delta;
                        if (this.counter >= 30) {
                            this.counter = 0;
                            let gap = this.targV - this.curV;
                            let delta = Math.floor(gap / 5);
                            if (delta == 0) {
                                delta = gap > 0 ? 1 : -1;
                            }
                            this.curV += delta;
                            this.nt.text = this.fmt(this.curV);
                        }
                    }
                }
            }
            UI.SmartNumber = SmartNumber;
        })(UI = Core.UI || (Core.UI = {}));
        let SubPkg;
        (function (SubPkg) {
            class Mgr {
                init(segment) {
                    console.log("开始分包", Mgr.subPkgInfo);
                    if (TJ.API.AppInfo.Channel() == TJ.Define.Channel.AppRt.WX_AppRt) {
                        this.pkgFlag = 0;
                        this.pkgInfo = Mgr.subPkgInfo;
                        this.segment = segment / this.pkgInfo.length;
                        this.loadPkg_wx();
                    }
                    else {
                        EventMgr.notify("preloadStep", segment);
                        EventMgr.notify("sgl");
                        GameMgr.autoLoadNext();
                    }
                }
                loadPkg_wx() {
                    if (this.pkgFlag == this.pkgInfo.length) {
                        EventMgr.notify("sgl");
                        GameMgr.autoLoadNext();
                    }
                    else {
                        let info = this.pkgInfo[this.pkgFlag];
                        let name = info.name;
                        let root = info.root;
                        console.log("开始分包 loadPkg_wx()", Mgr.subPkgInfo);
                        Laya.Browser.window.wx.loadSubpackage({
                            name: name,
                            success: (res) => {
                                console.log(`load ${name} suc`);
                                EventMgr.notify("preloadStep", this.segment);
                                Laya.MiniAdpter.subNativeFiles[name] = root;
                                Laya.MiniAdpter.nativefiles.push(root);
                                this.pkgFlag++;
                                this.loadPkg_wx();
                            },
                            fail: (res) => {
                                console.error(`load ${name} err: `, res);
                            },
                        });
                    }
                }
            }
            Mgr.subPkgInfo = [
                { name: "sp1", root: "res3d/p1" },
                { name: "sp2", root: "res3d/p2" },
            ];
            SubPkg.Mgr = Mgr;
        })(SubPkg = Core.SubPkg || (Core.SubPkg = {}));
        let Fsm;
        (function (Fsm) {
            class BaseState {
                constructor() {
                    this.inited = false;
                }
                tryEnter(args) {
                    if (!this.inited) {
                        this.inited = true;
                        this.onInit();
                    }
                    this.onEnter(args);
                }
            }
            Fsm.BaseState = BaseState;
            class StateMachine {
                constructor(host, tpls) {
                    this.isStart = false;
                    this.stateMap = {};
                    for (let i = 0; i < tpls.length; i++) {
                        let tpl = tpls[i];
                        let s = new tpl();
                        s.host = host;
                        s.fsm = this;
                        this.stateMap[s.name] = s;
                        i == 0 && (this.curState = s);
                    }
                }
                to(stateName, args) {
                    if (this.isStart && this.curState.name != stateName) {
                        let toState = this.stateMap[stateName];
                        if (toState) {
                            this.curState.onExit();
                            this.curState = toState;
                            this.curState.tryEnter(args);
                        }
                    }
                }
                start(args) {
                    this.isStart = true;
                    this.curState.tryEnter(args);
                }
            }
            Fsm.StateMachine = StateMachine;
        })(Fsm = Core.Fsm || (Core.Fsm = {}));
        let Game;
        (function (Game) {
            class Mgr {
                static start() {
                    for (let cls of Mgr.mgrs) {
                        cls["I"] = new cls();
                    }
                    Mgr.fsm = new StateMachine(this, [G["Game_Init"], G["Game_Ready"], G["Game_Main"], G["Game_Settle"]]);
                    Mgr.fsm.start();
                }
                static readyAll() {
                    Mgr.autoLoadNext();
                }
                static autoLoadNext() {
                    Mgr.curLoadPos += 1;
                    let mgrCls = Mgr.mgrs[Mgr.curLoadPos];
                    if (mgrCls) {
                        mgrCls["I"].init(Mgr.loadSeg[Mgr.curLoadPos]);
                    }
                    else {
                        Laya.timer.once(300, null, () => {
                            EventMgr.notify("preloadCpl");
                        });
                    }
                }
                static playSound(name) {
                    return Laya.SoundManager.playSound(Formula.getSoundPath(name, 1));
                }
                static playMusic(name) {
                    return Laya.SoundManager.playMusic(Formula.getSoundPath(name, 2));
                }
                static checkSign(loop = true, totalTimes = 7) {
                    let rs = 0;
                    let lastTime = DataMgr.getPlayerData("lastSignTs");
                    if (!lastTime) {
                        rs = 1;
                    }
                    else {
                        let signTimes = DataMgr.getPlayerData("signTimes");
                        let isNewDay = Util.checkNewDay(lastTime);
                        if (loop && isNewDay && signTimes == totalTimes) {
                            DataMgr.setValue("signTimes", 0);
                            signTimes = 0;
                        }
                        if (signTimes < totalTimes) {
                            rs = isNewDay ? 1 : 2;
                        }
                        else {
                            rs = 3;
                        }
                    }
                    return rs;
                }
                static signWithoutReward() {
                    DataMgr.setValue("lastSignTs", Date.now());
                    DataMgr.deltaNum("signTimes", 1);
                }
                static sign(crc, times = 1) {
                    let prg = DataMgr.getPlayerData("signTimes");
                    let confData = LC.SignConf.arr[prg];
                    let add = times * confData["reward"];
                    DataMgr.deltaNum(crc, add);
                    Mgr.signWithoutReward();
                    return add;
                }
            }
            Mgr.mgrs = [Event.Mgr, SubPkg.Mgr, Tween.Mgr, Resource.Mgr, Data.Mgr, UI.Mgr, Scene.Mgr];
            Mgr.loadSeg = [0.3, 0.02, 0.02, 0.4, 0.02, 0.1, 0.14];
            Mgr.curLoadPos = -1;
            Game.Mgr = Mgr;
        })(Game = Core.Game || (Core.Game = {}));
    })(Core || (Core = {}));
    let SubPkgMgr = Core.SubPkg.Mgr;
    let EventMgr = Core.Event.Mgr;
    let TweenMgr = Core.Tween.Mgr;
    let Tweener = Core.Tween.Tweener;
    let ResourceMgr = Core.Resource.Mgr;
    let DataMgr = Core.Data.Mgr;
    let SceneMgr = Core.Scene.Mgr;
    let UIMgr = Core.UI.Mgr;
    let UIBase = Core.UI.UIBase;
    let UIDebug = Core.UI.UIDebug;
    let UITop = Core.UI.UITop;
    let OpenType = Core.UI.OpenType;
    let GameMgr = Core.Game.Mgr;
    let StateMachine = Core.Fsm.StateMachine;
    let BaseState = Core.Fsm.BaseState;
    let BaseObj = Core.Resource.BaseObj;
    let ObjPool = Core.Resource.ObjPool;

    class ListItem extends Laya.Script {
        onAwake() {
            this.init();
        }
        init() {
            console.log("ListItem Onawake");
            this.List = this.owner;
            this.List.vScrollBarSkin = "";
        }
        show() {
        }
        ;
        _show() {
            this.show();
        }
        refresh() {
        }
        ;
        _refresh() {
            this.refresh();
        }
        hide() {
            this.List.visible = false;
        }
        ;
        _hide() {
            this.hide();
        }
    }

    var clothtype;
    (function (clothtype) {
        clothtype[clothtype["Hair"] = 0] = "Hair";
        clothtype[clothtype["Dress"] = 1] = "Dress";
        clothtype[clothtype["Coat"] = 2] = "Coat";
        clothtype[clothtype["Shirt"] = 3] = "Shirt";
        clothtype[clothtype["Trousers"] = 4] = "Trousers";
        clothtype[clothtype["Socks"] = 5] = "Socks";
        clothtype[clothtype["Shose"] = 6] = "Shose";
        clothtype[clothtype["Ornament"] = 7] = "Ornament";
    })(clothtype || (clothtype = {}));
    class ClothChange extends Laya.Script {
        constructor() {
            super(...arguments);
            this.PhotosIndex = 0;
            this.mes = [];
            this.nowclothData = {
                Hair: 0,
                Dress: 0,
                Coat: 0,
                Shirt: 0,
                Trousers: 0,
                Socks: 0,
                Shose: 0,
                Ornament: 0
            };
        }
        onAwake() {
            ClothChange.Instance = this;
            this.FemaleRoot = this.owner;
            this.Hair = this.FemaleRoot.getChildByName("Hair");
            this.Hair1 = this.FemaleRoot.getChildByName("Hair1");
            this.Ornament = this.FemaleRoot.getChildByName("Ornament");
            this.Ornament1 = this.FemaleRoot.getChildByName("Ornament1");
            this.Shirt = this.FemaleRoot.getChildByName("Shirt");
            this.Shirt1 = this.FemaleRoot.getChildByName("Shirt1");
            this.Trousers = this.FemaleRoot.getChildByName("Trousers");
            this.Trousers1 = this.FemaleRoot.getChildByName("Trousers1");
            this.Dress = this.FemaleRoot.getChildByName("Dress");
            this.Dress1 = this.FemaleRoot.getChildByName("Dress1");
            this.Socks = this.FemaleRoot.getChildByName("Socks");
            this.Socks1 = this.FemaleRoot.getChildByName("Socks1");
            this.Shose = this.FemaleRoot.getChildByName("Shose");
            this.Shose1 = this.FemaleRoot.getChildByName("Shose1");
            this.Coat = this.FemaleRoot.getChildByName("Coat");
            this.Coat1 = this.FemaleRoot.getChildByName("Coat1");
            for (let i = 0; i < 8; i++) {
                this._ClothChange(0, i);
            }
        }
        _ClothChange(itemID, type) {
            switch (type) {
                case clothtype.Hair:
                    this.HairChange(itemID);
                    break;
                case clothtype.Dress:
                    this.DressChange(itemID);
                    break;
                case clothtype.Coat:
                    this.CoatChange(itemID);
                    break;
                case clothtype.Shirt:
                    this.ShirtChange(itemID);
                    break;
                case clothtype.Trousers:
                    this.TrousersChange(itemID);
                    break;
                case clothtype.Socks:
                    this.SocksChange(itemID);
                    break;
                case clothtype.Shose:
                    this.ShoseChange(itemID);
                    break;
                case clothtype.Ornament:
                    this.OrnamentChange(itemID);
                    break;
            }
        }
        ClothReceive() {
            for (let i = 0; i < 8; i++) {
                this._ClothChange(0, i);
            }
        }
        GetPhotosData() {
            GameDataController.PhotosData();
        }
        Share() {
            console.log("拍照");
            let item = GameDataController.PhotosData;
            if (item) {
                this.mes = item;
            }
            this.mes.push(this.nowclothData);
            GameDataController.PhotosData = this.mes;
        }
        HairChange(itemID) {
            this.Hair.visible = this.Hair1.visible = false;
            if (itemID == null || itemID == 0 || this.nowclothData.Hair == itemID) {
                itemID = 10002;
            }
            this.nowclothData.Hair = itemID;
            this.Hair.visible = this.Hair1.visible = true;
            let clothdata = GameDataController._clothData.get(itemID);
            this.Hair.skin = clothdata.GetPath1();
            this.Hair1.skin = clothdata.GetPath2();
            this.Hair.centerX = clothdata.GetPosition1().x;
            this.Hair.centerY = clothdata.GetPosition1().y;
            this.Hair1.centerX = clothdata.GetPosition2().x;
            this.Hair1.centerY = clothdata.GetPosition2().y;
            this.Hair.zOrder = clothdata.Sort1;
            this.Hair1.zOrder = clothdata.Sort2;
        }
        OrnamentChange(itemID) {
            this.Ornament.visible = this.Ornament1.visible = false;
            if (itemID == null || itemID == 0 || this.nowclothData.Ornament == itemID) {
                itemID = 0;
                this.nowclothData.Ornament = itemID;
                return;
            }
            this.nowclothData.Ornament = itemID;
            this.Ornament.visible = this.Ornament1.visible = true;
            let clothdata = GameDataController._ClothData.get(itemID);
            this.Ornament.skin = clothdata.GetPath1();
            this.Ornament1.skin = clothdata.GetPath2();
            this.Ornament.centerX = clothdata.GetPosition1().x;
            this.Ornament.centerY = clothdata.GetPosition1().y;
            this.Ornament1.centerX = clothdata.GetPosition2().x;
            this.Ornament1.centerY = clothdata.GetPosition2().y;
            this.Ornament.zOrder = clothdata.Sort1;
            this.Ornament1.zOrder = clothdata.Sort2;
        }
        ShirtChange(itemID) {
            this.Shirt.visible = this.Shirt1.visible = false;
            if (itemID == null || itemID == 0 || this.nowclothData.Shirt == itemID) {
                itemID = 10000;
            }
            else {
                this.DressClose();
                this.UpDownOpen();
            }
            this.nowclothData.Shirt = itemID;
            this.Shirt.visible = this.Shirt1.visible = true;
            let clothdata = GameDataController._ClothData.get(itemID);
            this.Shirt.skin = clothdata.GetPath1();
            this.Shirt1.skin = clothdata.GetPath2();
            this.Shirt.centerX = clothdata.GetPosition1().x;
            this.Shirt.centerY = clothdata.GetPosition1().y;
            this.Shirt1.centerX = clothdata.GetPosition2().x;
            this.Shirt1.centerY = clothdata.GetPosition2().y;
            this.Shirt.zOrder = clothdata.Sort1;
            this.Shirt1.zOrder = clothdata.Sort2;
        }
        TrousersChange(itemID) {
            this.Trousers.visible = this.Trousers1.visible = false;
            if (itemID == null || itemID == 0 || this.nowclothData.Trousers == itemID) {
                itemID = 10001;
            }
            else {
                this.DressClose();
                this.UpDownOpen();
            }
            this.nowclothData.Trousers = itemID;
            this.Trousers.visible = this.Trousers1.visible = true;
            let clothdata = GameDataController._ClothData.get(itemID);
            this.Trousers.visible = this.Trousers1.visible = true;
            this.Trousers.skin = clothdata.GetPath1();
            this.Trousers1.skin = clothdata.GetPath2();
            this.Trousers.centerX = clothdata.GetPosition1().x;
            this.Trousers.centerY = clothdata.GetPosition1().y;
            this.Trousers1.centerX = clothdata.GetPosition2().x;
            this.Trousers1.centerY = clothdata.GetPosition2().y;
            this.Trousers.zOrder = clothdata.Sort1;
            this.Trousers1.zOrder = clothdata.Sort2;
        }
        DressChange(itemID) {
            this.Dress.visible = this.Dress1.visible = false;
            if (itemID == null || itemID == 0 || this.nowclothData.Dress == itemID) {
                itemID = 0;
                this.nowclothData.Dress = itemID;
                this.UpDownOpen();
                return;
            }
            else {
                this.DressOpen();
            }
            this.nowclothData.Dress = itemID;
            this.Dress.visible = this.Dress1.visible = true;
            this.UpDownClose();
            let clothdata = GameDataController._ClothData.get(itemID);
            this.Dress.skin = clothdata.GetPath1();
            this.Dress1.skin = clothdata.GetPath2();
            this.Dress.centerX = clothdata.GetPosition1().x;
            this.Dress.centerY = clothdata.GetPosition1().y;
            this.Dress1.centerX = clothdata.GetPosition2().x;
            this.Dress1.centerY = clothdata.GetPosition2().y;
            this.Dress.zOrder = clothdata.Sort1;
            this.Dress1.zOrder = clothdata.Sort2;
        }
        SocksChange(itemID) {
            this.Socks1.visible = this.Socks.visible = false;
            if (itemID == null || itemID == 0 || this.nowclothData.Socks == itemID) {
                itemID = 0;
                this.nowclothData.Socks = itemID;
                return;
            }
            this.Socks1.visible = this.Socks.visible = true;
            this.nowclothData.Socks = itemID;
            let clothdata = GameDataController._ClothData.get(itemID);
            this.Socks.skin = clothdata.GetPath1();
            this.Socks1.skin = clothdata.GetPath2();
            this.Socks.centerX = clothdata.GetPosition1().x;
            this.Socks.centerY = clothdata.GetPosition1().y;
            this.Socks1.centerX = clothdata.GetPosition2().x;
            this.Socks1.centerY = clothdata.GetPosition2().y;
            this.Socks.zOrder = clothdata.Sort1;
            this.Socks1.zOrder = clothdata.Sort2;
        }
        ShoseChange(itemID) {
            this.Shose.visible = this.Shose1.visible = false;
            if (itemID == null || itemID == 0 || this.nowclothData.Shose == itemID) {
                itemID = 0;
                this.nowclothData.Shose = itemID;
                return;
            }
            this.Shose.visible = this.Shose1.visible = true;
            this.nowclothData.Shose = itemID;
            let clothdata = GameDataController._ClothData.get(itemID);
            this.Shose.skin = clothdata.GetPath1();
            this.Shose1.skin = clothdata.GetPath2();
            this.Shose.centerX = clothdata.GetPosition1().x;
            this.Shose.centerY = clothdata.GetPosition1().y;
            this.Shose1.centerX = clothdata.GetPosition2().x;
            this.Shose1.centerY = clothdata.GetPosition2().y;
            this.Shose.zOrder = clothdata.Sort1;
            this.Shose1.zOrder = clothdata.Sort2;
        }
        CoatChange(itemID) {
            this.Coat.visible = this.Coat1.visible = false;
            if (itemID == null || itemID == 0 || this.nowclothData.Coat == itemID) {
                itemID = 0;
                this.nowclothData.Coat = itemID;
                return;
            }
            this.Coat.visible = this.Coat1.visible = true;
            this.nowclothData.Coat = itemID;
            let clothdata = GameDataController._ClothData.get(itemID);
            this.Coat.skin = clothdata.GetPath1();
            this.Coat1.skin = clothdata.GetPath2();
            this.Coat.centerX = clothdata.GetPosition1().x;
            this.Coat.centerY = clothdata.GetPosition1().y;
            this.Coat1.centerX = clothdata.GetPosition2().x;
            this.Coat1.centerY = clothdata.GetPosition2().y;
            this.Coat.zOrder = clothdata.Sort1;
            this.Coat1.zOrder = clothdata.Sort2;
        }
        UpDownClose() {
            this.ShirtChange(0);
            this.TrousersChange(0);
            this.Shirt.visible = this.Shirt1.visible = false;
            this.Trousers.visible = this.Trousers1.visible = false;
        }
        UpDownOpen() {
            this.Shirt.visible = this.Shirt1.visible = true;
            this.Trousers.visible = this.Trousers1.visible = true;
        }
        DressOpen() {
            this.Dress.visible = this.Dress1.visible = true;
        }
        DressClose() {
            this.DressChange(0);
            this.Dress.visible = this.Dress1.visible = false;
        }
    }

    class ADManager {
        constructor() {
        }
        static ShowBanner() {
            if (TJ.API.AppInfo.Channel() == TJ.Define.Channel.AppRt.ZJTD_AppRt) {
                return;
            }
            let p = new TJ.ADS.Param();
            p.place = TJ.ADS.Place.BOTTOM | TJ.ADS.Place.CENTER;
            TJ.ADS.Api.ShowBanner(p);
        }
        static CloseBanner() {
            let p = new TJ.ADS.Param();
            p.place = TJ.ADS.Place.BOTTOM | TJ.ADS.Place.CENTER;
            TJ.ADS.Api.RemoveBanner(p);
        }
        static ShowNormal() {
            let p = new TJ.API.AdService.Param();
            TJ.API.AdService.ShowNormal(p);
        }
        static showNormal2() {
            TJ.API.AdService.ShowNormal(new TJ.API.AdService.Param());
        }
        static ShowReward(rewardAction) {
            console.log("?????");
            let p = new TJ.ADS.Param();
            p.extraAd = true;
            let getReward = false;
            p.cbi.Add(TJ.Define.Event.Reward, () => {
                getReward = true;
                if (rewardAction != null)
                    rewardAction();
            });
            p.cbi.Add(TJ.Define.Event.Close, () => {
                if (!getReward) {
                    UIMgr.tip("观看完整广告才能获取奖励哦！");
                }
            });
            p.cbi.Add(TJ.Define.Event.NoAds, () => {
                UIMgr.tip("暂时没有广告，过会儿再试试吧！");
            });
            TJ.ADS.Api.ShowReward(p);
        }
        static Event(param, value = null) {
            console.log("Param:>" + param + "Value:>" + value);
            let p = new TJ.GSA.Param();
            if (value == null) {
                p.id = param;
            }
            else {
                p.id = param + value;
            }
            console.log(p.id);
            TJ.GSA.Api.Event(p);
        }
        static initShare() {
            if (TJ.API.AppInfo.Channel() == TJ.Define.Channel.AppRt.WX_AppRt) {
                this.wx.onShareAppMessage(() => {
                    return {
                        title: this.shareContent,
                        imageUrl: this.shareImgUrl,
                        query: ""
                    };
                });
                this.wx.showShareMenu({
                    withShareTicket: true,
                    success: null,
                    fail: null,
                    complete: null
                });
            }
        }
        static lureShare() {
            if (TJ.API.AppInfo.Channel() == TJ.Define.Channel.AppRt.WX_AppRt) {
                this.wx.shareAppMessage({
                    title: this.shareContent,
                    imageUrl: this.shareImgUrl,
                    query: ""
                });
            }
        }
        static VibrateShort() {
            TJ.API.Vibrate.Short();
        }
        static Vibratelong() {
            TJ.API.Vibrate.Long();
        }
        static TAPoint(type, name) {
            let p = new TJ.API.TA.Param();
            p.id = name;
            switch (type) {
                case TaT.BtnShow:
                    TJ.API.TA.Event_Button_Show(p);
                    break;
                case TaT.BtnClick:
                    TJ.API.TA.Event_Button_Click(p);
                    break;
                case TaT.PageShow:
                    TJ.API.TA.Event_Page_Show(p);
                    break;
                case TaT.PageEnter:
                    TJ.API.TA.Event_Page_Enter(p);
                    break;
                case TaT.PageLeave:
                    TJ.API.TA.Event_Page_Leave(p);
                    break;
                case TaT.LevelStart:
                    TJ.API.TA.Event_Level_Start(p);
                    break;
                case TaT.LevelFail:
                    TJ.API.TA.Event_Level_Fail(p);
                    break;
                case TaT.LevelFinish:
                    TJ.API.TA.Event_Level_Finish(p);
                    break;
            }
        }
    }
    ADManager.wx = Laya.Browser.window.wx;
    ADManager.shareImgUrl = "http://image.tomatojoy.cn/bf7e3448ee1868f50a37d6518ada84d5";
    ADManager.shareContent = "快来试试制作美味的牛排吧！";
    var TaT;
    (function (TaT) {
        TaT[TaT["BtnShow"] = 0] = "BtnShow";
        TaT[TaT["BtnClick"] = 1] = "BtnClick";
        TaT[TaT["PageShow"] = 2] = "PageShow";
        TaT[TaT["PageEnter"] = 3] = "PageEnter";
        TaT[TaT["PageLeave"] = 4] = "PageLeave";
        TaT[TaT["LevelStart"] = 5] = "LevelStart";
        TaT[TaT["LevelFinish"] = 6] = "LevelFinish";
        TaT[TaT["LevelFail"] = 7] = "LevelFail";
    })(TaT || (TaT = {}));

    class SkinItem extends Laya.Script {
        constructor() {
            super(...arguments);
            this.HeightMax = 85;
            this.WidthtMax = 80;
        }
        onAwake() {
            this.SkinChose = this.owner;
            this.BG = this.SkinChose.getChildByName("BG");
            this.IconParent = this.SkinChose.getChildByName("IconParent");
            this.Icon = this.IconParent.getChildByName("Icon");
            this.Lock = this.SkinChose.getChildByName("Lock");
            this.Adimage = this.Lock.getChildAt(1);
            this.Star = this.SkinChose.getChildByName("Star");
            this.Select = this.SkinChose.getChildByName("Select");
            this.SkinChose.on(Laya.Event.CLICK, this, this.onClick);
        }
        fell(data) {
            this.ID = data.ID;
            this.type = data.Type;
            this.skinname = data.Name;
            this.Select.visible = false;
            this.type2 = data.GetType2;
            this.Lock.visible = !GameDataController.ClothCanUse(data.ID);
            if (data.GetType2 != null) {
                this.Adimage.visible = false;
            }
            else {
                this.Adimage.visible = true;
            }
            console.log(GameDataController.ClothDataRefresh[data.ID], data.ID);
            switch (this.type) {
                case clothtype.Hair:
                    if (ClothChange.Instance.nowclothData.Hair == this.ID) {
                        this.Select.visible = true;
                    }
                    break;
                case clothtype.Dress:
                    if (ClothChange.Instance.nowclothData.Dress == this.ID) {
                        this.Select.visible = true;
                    }
                    break;
                case clothtype.Coat:
                    if (ClothChange.Instance.nowclothData.Coat == this.ID) {
                        this.Select.visible = true;
                    }
                    break;
                case clothtype.Shirt:
                    if (ClothChange.Instance.nowclothData.Shirt == this.ID) {
                        this.Select.visible = true;
                    }
                    break;
                case clothtype.Trousers:
                    if (ClothChange.Instance.nowclothData.Trousers == this.ID) {
                        this.Select.visible = true;
                    }
                    break;
                case clothtype.Socks:
                    if (ClothChange.Instance.nowclothData.Socks == this.ID) {
                        this.Select.visible = true;
                    }
                    break;
                case clothtype.Shose:
                    if (ClothChange.Instance.nowclothData.Shose == this.ID) {
                        this.Select.visible = true;
                    }
                    break;
                case clothtype.Ornament:
                    if (ClothChange.Instance.nowclothData.Ornament == this.ID) {
                        this.Select.visible = true;
                    }
                    break;
            }
            this.Icon.skin = data.GetPath1();
            let imageHeight = parseFloat(this.Icon.height.toString());
            let imagewidth = parseFloat(this.Icon.width.toString());
            this.IconParent.width = 100;
            this.IconParent.height = 100;
            let pr = 0;
            if (imagewidth > imageHeight) {
                pr = this.WidthtMax / imagewidth;
            }
            else {
                pr = this.HeightMax / imageHeight;
            }
            this.Icon.scaleX = pr;
            this.Icon.scaleY = pr;
            this.Icon.centerX = 0;
            this.Icon.centerY = 0;
        }
        onClick() {
            if (this.Lock.visible) {
                if (this.Adimage.visible) {
                    ADManager.ShowReward(() => {
                        this.Select.visible = true;
                        ClothChange.Instance._ClothChange(this.ID, this.type);
                        BagListController.Instance.getlist(this.type)._refresh();
                        let dataall = GameDataController.ClothDataRefresh;
                        dataall[this.ID] = 0;
                        GameDataController.ClothDataRefresh = dataall;
                    });
                }
                else {
                    UIMgr.tip("当前装扮未解锁");
                }
            }
            else {
                console.log("点击选择衣服-------", this.ID, "------", this.skinname);
                console.log("                                                     ");
                this.Select.visible = true;
                ClothChange.Instance._ClothChange(this.ID, this.type);
                BagListController.Instance.getlist(this.type)._refresh();
            }
        }
    }

    class AccList extends ListItem {
        onAwake() {
            super.onAwake();
            this._refresh();
            this.List.dataSource = this.Data;
            this.List.renderHandler = new Laya.Handler(this, this.onWrapItem);
        }
        onWrapItem(cell, index) {
            cell.getComponent(SkinItem).fell(this.Data[index]);
        }
        show() {
            this._refresh();
            this.List.dataSource = this.Data;
        }
        refresh() {
            this.Data = GameDataController.OrnamentData;
            this.List.refresh();
        }
        hide() {
            super.hide();
        }
    }

    class HairList extends ListItem {
        onAwake() {
            super.onAwake();
            this.refresh();
            this.List.dataSource = this.Data;
            this.List.renderHandler = new Laya.Handler(this, this.onWrapItem);
        }
        onWrapItem(cell, index) {
            cell.getComponent(SkinItem).fell(this.Data[index]);
        }
        show() {
            this.refresh();
            this.List.dataSource = this.Data;
        }
        refresh() {
            this.Data = GameDataController.HairData;
            this.List.refresh();
        }
        hide() {
            super.hide();
            console.log("hairList,hide", this.List.visible);
        }
    }

    class DressList extends ListItem {
        onAwake() {
            console.log("DressList OnAwake");
            this.init();
            this.refresh();
            this.List.dataSource = this.Data;
            this.List.renderHandler = new Laya.Handler(this, this.onWrapItem);
        }
        init() {
            super.init();
        }
        onWrapItem(cell, index) {
            cell.getComponent(SkinItem).fell(this.Data[index]);
        }
        show() {
            console.log("DressList Onshow");
            this.refresh();
            this.List.dataSource = this.Data;
        }
        refresh() {
            this.Data = GameDataController.DressData;
            this.List.refresh();
        }
        hide() {
            super.hide();
            console.log("DressListHide", this.List.visible);
        }
    }

    class UpList extends ListItem {
        onAwake() {
            super.onAwake();
            this._refresh();
            this.List.dataSource = this.Data;
            this.List.renderHandler = new Laya.Handler(this, this.onWrapItem);
        }
        onWrapItem(cell, index) {
            cell.getComponent(SkinItem).fell(this.Data[index]);
        }
        show() {
            this.refresh();
            this.List.dataSource = this.Data;
        }
        refresh() {
            this.Data = GameDataController.ShirtData;
            this.List.refresh();
            console.log("UpList刷新列表");
        }
        hide() {
            super.hide();
        }
    }

    class DownList extends ListItem {
        onAwake() {
            super.onAwake();
            this.refresh();
            this.List.dataSource = this.Data;
            this.List.renderHandler = new Laya.Handler(this, this.onWrapItem);
        }
        onWrapItem(cell, index) {
            cell.getComponent(SkinItem).fell(this.Data[index]);
        }
        show() {
            this._refresh();
            this.List.dataSource = this.Data;
        }
        refresh() {
            this.Data = GameDataController.TrousersData;
            this.List.refresh();
        }
        hide() {
            super.hide();
        }
    }

    class SockList extends ListItem {
        onAwake() {
            super.onAwake();
            this._refresh();
            this.List.dataSource = this.Data;
            this.List.renderHandler = new Laya.Handler(this, this.onWrapItem);
        }
        onWrapItem(cell, index) {
            cell.getComponent(SkinItem).fell(this.Data[index]);
        }
        show() {
            this._refresh();
            this.List.dataSource = this.Data;
        }
        refresh() {
            this.Data = GameDataController.SocksData;
            this.List.refresh();
        }
        hide() {
            super.hide();
        }
    }

    class ShoesList extends ListItem {
        onAwake() {
            super.onAwake();
            this.refresh();
            this.List.dataSource = this.Data;
            this.List.renderHandler = new Laya.Handler(this, this.onWrapItem);
        }
        onWrapItem(cell, index) {
            cell.getComponent(SkinItem).fell(this.Data[index]);
        }
        show() {
            this.refresh();
            this.List.dataSource = this.Data;
        }
        refresh() {
            this.Data = GameDataController.ShoseData;
            this.List.refresh();
        }
        hide() {
            super.hide();
        }
    }

    class ClothBtn extends Laya.Script {
        onAwake() {
            this.Btn = this.owner.getChildAt(0);
            this.icon = this.owner.getChildAt(1);
            this.Btn.on(Laya.Event.CLICK, this, this.click);
        }
        fell(mes, index) {
            this.data = mes;
            this.Btn.skin = this.data + ".png";
            this.icon.skin = this.data + "1.png";
            this.index = index;
            this.icon.visible = false;
            this.ID = index;
            if (this.ID > 1) {
                this.ID += 1;
            }
            if (BagListController.Instance.SelectIndex == this.ID) {
                this.icon.visible = true;
            }
            else {
                this.icon.visible = false;
            }
        }
        click() {
            switch (this.index) {
                case 0:
                    BagListController.Instance.ClothesPageChange(0);
                    break;
                case 1:
                    BagListController.Instance.ClothesPageChange(1);
                    break;
                case 2:
                    BagListController.Instance.ClothesPageChange(3);
                    break;
                case 3:
                    BagListController.Instance.ClothesPageChange(4);
                    break;
                case 4:
                    BagListController.Instance.ClothesPageChange(5);
                    break;
                case 5:
                    BagListController.Instance.ClothesPageChange(6);
                    break;
                case 6:
                    BagListController.Instance.ClothesPageChange(7);
                    break;
            }
        }
    }

    class BagListController extends Laya.Script {
        constructor() {
            super(...arguments);
            this.listtype = ListType.HairList;
            this.ListMap = new Map();
            this.SelectIndex = 0;
            this.Data = ["Btnbar/hair",
                "Btnbar/dress",
                "Btnbar/shirt",
                "Btnbar/trousers",
                "Btnbar/socks",
                "Btnbar/shose",
                "Btnbar/ornament"];
            this.listnameitem = ListType.HairList;
        }
        onAwake() {
            BagListController.Instance = this;
            this.Bag = this.owner;
            this.BtnBar = this.Bag.getChildByName("BtnBar");
            this.ShowView = this.Bag.getChildByName("ShowView");
            this.ListBtn = this.BtnBar.getChildByName("ListBtn");
            this.hairList = this.ShowView.getChildByName("hair").getChildByName("hairList");
            let _hairList = this.hairList.getComponent(HairList);
            this.dressList = this.ShowView.getChildByName("dress").getChildByName("dressList");
            let _dressList = this.dressList.getComponent(DressList);
            this.shirtList = this.ShowView.getChildByName("shirt").getChildByName("shirtList");
            let _shirtList = this.shirtList.getComponent(UpList);
            this.trousersList = this.ShowView.getChildByName("trousers").getChildByName("trousersList");
            let _trousersList = this.trousersList.getComponent(DownList);
            this.socksList = this.ShowView.getChildByName("socks").getChildByName("socksList");
            let _socksList = this.socksList.getComponent(SockList);
            this.shoesList = this.ShowView.getChildByName("shose").getChildByName("shoseList");
            let _shoesList = this.shoesList.getComponent(ShoesList);
            this.ornamentList = this.ShowView.getChildByName("ornament").getChildByName("ornamentList");
            let _ornamentList = this.ornamentList.getComponent(AccList);
            this.ListMap.set(ListType.HairList, _hairList);
            this.ListMap.set(ListType.DressList, _dressList);
            this.ListMap.set(ListType.ShirtList, _shirtList);
            this.ListMap.set(ListType.TrousersList, _trousersList);
            this.ListMap.set(ListType.SocksList, _socksList);
            this.ListMap.set(ListType.ShoesList, _shoesList);
            this.ListMap.set(ListType.OrnamentList, _ornamentList);
            console.log("BagListControllerOnawake", this.ListMap);
            this.Up = this.BtnBar.getChildByName("Up");
            this.Down = this.BtnBar.getChildByName("Down");
            this.Hair = this.BtnBar.getChildByName("Hair");
            this.Acc = this.BtnBar.getChildByName("Acc");
            this.Shoes = this.BtnBar.getChildByName("Shoes");
            this.Dress = this.BtnBar.getChildByName("Dress");
            this.Sock = this.BtnBar.getChildByName("Sock");
            this.BtnBarListFell();
        }
        BtnBarListFell() {
            this.ListBtn.hScrollBarSkin = "";
            this.ListBtn.array = this.Data;
            this.ListBtn.renderHandler = new Laya.Handler(this, this.onWrapItem);
        }
        onWrapItem(cell, index) {
            cell.getComponent(ClothBtn).fell(this.Data[index], index);
        }
        onStart() {
            this.ClothesPageChange(0);
        }
        btnev(img, fun) {
            img.on(Laya.Event.CLICK, this, fun);
        }
        ClothesPageChange(index) {
            this.SelectIndex = index;
            switch (index) {
                case ListType.HairList:
                    this.showList(ListType.HairList);
                    break;
                case ListType.DressList:
                    this.showList(ListType.DressList);
                    break;
                case ListType.ShoesList:
                    this.showList(ListType.ShoesList);
                    break;
                case ListType.OrnamentList:
                    this.showList(ListType.OrnamentList);
                    break;
                case ListType.SocksList:
                    this.showList(ListType.SocksList);
                    break;
                case ListType.TrousersList:
                    this.showList(ListType.TrousersList);
                    break;
                case ListType.ShirtList:
                    this.showList(ListType.ShirtList);
                    break;
            }
            this.ListBtn.refresh();
        }
        showList(listname = this.listnameitem) {
            this.listnameitem = listname;
            this.ListMap.forEach((v, k) => {
                if (k == listname) {
                    v.owner.parent.visible = true;
                    v._refresh();
                }
                else {
                    v.owner.parent.visible = false;
                }
            });
        }
        getlist(listnumber) {
            return this.ListMap.get(listnumber);
        }
        refresh() {
            this.ListMap.forEach((v, k) => {
                v._refresh();
            });
        }
    }
    var ListType;
    (function (ListType) {
        ListType[ListType["HairList"] = 0] = "HairList";
        ListType[ListType["DressList"] = 1] = "DressList";
        ListType[ListType["CoatList"] = 2] = "CoatList";
        ListType[ListType["ShirtList"] = 3] = "ShirtList";
        ListType[ListType["TrousersList"] = 4] = "TrousersList";
        ListType[ListType["SocksList"] = 5] = "SocksList";
        ListType[ListType["ShoesList"] = 6] = "ShoesList";
        ListType[ListType["OrnamentList"] = 7] = "OrnamentList";
    })(ListType || (ListType = {}));

    class ActiveItem extends Laya.Script {
        constructor() {
            super(...arguments);
            this.Datas = [];
            this.Icons = [];
            this.Num = 0;
            this.MaxHeight = 85;
            this.MaxWeight = 85;
            this.str = {};
        }
        onAwake() {
            let item = this.owner;
            this.Bg = item.getChildByName("Bg");
            this.IconParent = item.getChildByName("IconParent");
            this.IconAll = this.IconParent.getChildByName("IconAll");
            this.ClothShow = item.getChildByName("ClothShow");
            for (let i = 0; i < this.ClothShow.numChildren; i++) {
                this.Icons.push(this.ClothShow.getChildAt(i).getChildAt(0));
            }
            this.ADBtn = item.getChildByName("ADBtn");
            this.TaskPre = this.ADBtn.getChildByName("TaskPre");
            this.ADBtn.on(Laya.Event.CLICK, this, this.adclick);
            this.PackName = item.getChildByName("PackName");
        }
        fell(mes, index) {
            let iconpath = "Active/taozhuang" + (index + 1) + ".png";
            let PackNamepath = "Active/Pack" + (index + 1) + ".png";
            this.Datas = mes;
            this.IconAll.skin = iconpath;
            this.PackName.skin = PackNamepath;
            console.log(this.Datas);
            this.Icons.forEach((v, i) => {
                if (i < this.Datas.length) {
                    v.visible = true;
                    v.skin = this.Datas[i].GetPath1();
                    let imageHeight = parseFloat(v.height.toString());
                    let imagewidth = parseFloat(v.width.toString());
                    let pr = 0;
                    if (imagewidth > imageHeight) {
                        pr = this.MaxWeight / imagewidth;
                    }
                    else {
                        pr = this.MaxHeight / imageHeight;
                    }
                    v.scaleX = pr;
                    v.scaleY = pr;
                    v.centerX = 0;
                    v.centerY = 0;
                }
                else {
                    v.visible = false;
                }
            });
            this.Datas.forEach((v, i) => {
                let nv = GameDataController.ClothDataRefresh[this.Datas[i].ID];
                this.str[this.Datas[i].ID] = nv;
            });
            console.log(this.str);
            GameDataController.ClothdatapackSet(this.Datas[0].GetType2, this.str);
            this.Num = GameDataController.ClothAlllockNum(this.str);
            console.log("未解锁数量", this.Num);
            this.Now = (this.Datas.length - this.Num) + "";
            this.Need = (this.Datas.length) + "";
            this.TaskPre.text = this.Now + " / " + this.Need;
            this.ADBtn.visible = this.Num > 0;
            for (let index = 0; index < this.ClothShow.numChildren; index++) {
                if (index >= this.Datas.length) {
                    this.ClothShow.getChildAt(index).visible = false;
                }
            }
        }
        adclick() {
            for (let k in this.str) {
                console.log(k);
                if (this.str[k] == 1) {
                    console.log("GameDataController.ClothDataRefresh[k]", k, GameDataController.ClothDataRefresh[k]);
                    let dataall = GameDataController.ClothDataRefresh;
                    dataall[k] = 0;
                    GameDataController.ClothDataRefresh = dataall;
                    console.log(this.str, this.Datas[0].GetType2);
                    Laya.LocalStorage.setJSON(this.Datas[0].GetType2, this.str);
                    UIMgr.get("UIActive").Refresh();
                    BagListController.Instance.showList();
                    return;
                }
            }
        }
    }

    class Game_Init extends BaseState {
        constructor() {
            super(...arguments);
            this.name = "Game_Init";
        }
        onInit() {
            GameDataController.windowWidth = Laya.Browser.width;
            if (DataMgr.getPlayerData("newPlay") == 0) {
                ADManager.Event("NEW_LOAD_START");
            }
            else {
                ADManager.Event("OLD_LOAD_START");
            }
            Laya.MouseManager.multiTouchEnabled = false;
            UIMgr.show("UIPreload");
        }
        onEnter(args) {
        }
        onExit() {
        }
    }

    class Game_Ready extends BaseState {
        constructor() {
            super(...arguments);
            this.name = "Game_Ready";
        }
        onInit() {
        }
        onEnter() {
            UIMgr.show("UIReady");
        }
        onExit() {
        }
    }

    class Game_Main extends BaseState {
        constructor() {
            super(...arguments);
            this.name = "Game_Main";
        }
        onInit() {
        }
        onEnter(args) {
            UIMgr.show("UIMain");
            GameMgr.playMusic("bgm");
        }
        onExit() {
        }
    }

    class Game_Settle extends BaseState {
        constructor() {
            super(...arguments);
            this.name = "Game_Settle";
        }
        onInit() {
        }
        onEnter(args) {
            Laya.SoundManager.stopMusic();
            EventMgr.notify(GameEvent.save);
            EventMgr.notify(GameEvent.pause, false);
            UIMgr.interim1(() => {
                GameMgr.fsm.to("Game_Ready");
            });
        }
        onExit() {
        }
    }

    class ClothData extends Laya.Script {
        constructor() {
            super(...arguments);
            this._pos1 = new Laya.Point;
            this._pos2 = new Laya.Point;
        }
        set ID(v) {
            this._ID = v;
        }
        get ID() {
            return this._ID;
        }
        set Name(v) {
            this._Name = v;
        }
        get Name() {
            return this._Name;
        }
        set Level(v) {
            this._Level = v;
        }
        get Level() {
            return this._Level;
        }
        set Gender(v) {
            this._Gender = v;
        }
        get Gender() {
            return this._Gender;
        }
        set Type(v) {
            this._Type = v;
        }
        get Type() {
            return this._Type;
        }
        set IconPath1(v) {
            this._IconPath1 = v;
        }
        get IconPath1() {
            return this._IconPath1;
        }
        set Position(v) {
            this._Position = v;
        }
        get Position() {
            return this._Position;
        }
        set Sort1(v) {
            this._Sort1 = v - 10;
        }
        get Sort1() {
            return this._Sort1;
        }
        set IconPath2(v) {
            this._IconPath2 = v;
        }
        get IconPath2() {
            return this._IconPath2;
        }
        set Position2(v) {
            this._Position2 = v;
        }
        get Position2() {
            return this._Position2;
        }
        set Sort2(v) {
            this._Sort2 = v - 10;
        }
        get Sort2() {
            return this._Sort2;
        }
        set NeedItems(v) {
            this._NeedItems = v;
        }
        get NeedItems() {
            return this._NeedItems;
        }
        set Introduce(v) {
            this._Introduce = v;
        }
        get Introduce() {
            return this._Introduce;
        }
        set Label1(v) {
            this._Label1 = v;
        }
        get Label1() {
            return this._Label1;
        }
        set Label2(v) {
            this._Label2 = v;
        }
        get Label2() {
            return this._Label2;
        }
        set Price(v) {
            this._Price = v;
        }
        get Price() {
            return this._Price;
        }
        set num(v) {
            this._num = v;
        }
        get num() {
            return this._num;
        }
        set Type2(v) {
            this._Type2 = v;
        }
        get Type2() {
            return this._Type2;
        }
        set Star(v) {
            this._Star = v;
        }
        get Star() {
            return this._Star;
        }
        GetKey() {
            return this.ID;
        }
        GetPosition1() {
            let str = this.Position;
            if (str == null) {
                return this._pos1;
            }
            let a = str.split(',');
            this._pos1.x = parseFloat(a[0]);
            this._pos1.y = -parseFloat(a[1]);
            return this._pos1;
        }
        GetPosition2() {
            let str = this.Position2;
            if (str == null) {
                return this._pos2;
            }
            let a = str.split(',');
            this._pos2.x = parseFloat(a[0]);
            this._pos2.y = -parseFloat(a[1]);
            return this._pos2;
        }
        GetPath1() {
            if (this.IconPath1 == null) {
                return null;
            }
            let pathway = "";
            let filename = "";
            if (this.Type == 0) {
                filename = "Hair";
            }
            if (this.Type == 1) {
                filename = "Dress";
            }
            if (this.Type == 2) {
                filename = "";
            }
            if (this.Type == 3) {
                filename = "Up";
            }
            if (this.Type == 4) {
                filename = "Down";
            }
            if (this.Type == 5) {
                filename = "Scoks";
            }
            if (this.Type == 6) {
                filename = "Shoes";
            }
            if (this.Type == 7) {
                filename = "ACC";
            }
            pathway = "Cloth/" + filename + "/" + this.IconPath1 + ".png";
            return pathway;
        }
        GetPath2() {
            if (this.IconPath2 == null) {
                return null;
            }
            let pathway = "";
            let filename = "";
            if (this.Type == 0) {
                filename = "Hair";
            }
            if (this.Type == 1) {
                filename = "Dress";
            }
            if (this.Type == 2) {
                filename = "";
            }
            if (this.Type == 3) {
                filename = "Up";
            }
            if (this.Type == 4) {
                filename = "Down";
            }
            if (this.Type == 5) {
                filename = "Scoks";
            }
            if (this.Type == 6) {
                filename = "Shoes";
            }
            if (this.Type == 7) {
                filename = "ACC";
            }
            pathway = "Cloth/" + filename + "/" + this.IconPath2 + ".png";
            return pathway;
        }
        get GetType2() {
            if (this.Type2 != null) {
                return this.Type2.substring(0, 3);
            }
            else {
                return null;
            }
        }
    }

    class ConfigData extends Laya.Script {
        constructor() {
            super(...arguments);
            this.ClothJson = [
                {
                    ID: "10000",
                    Name: "基础上衣",
                    Gender: "2",
                    Type: "3",
                    Position: "7,227.5,0",
                    Label1: "Label_1:100",
                    Label2: "Label_1:100",
                    Sort1: "3",
                    Sort2: "2",
                    IconPath1: "10000",
                },
                {
                    ID: "10001",
                    Name: "基础裙子",
                    Gender: "2",
                    Type: "4",
                    Position: "7,53,0",
                    Label1: "Label_1:100",
                    Label2: "Label_1:100",
                    Sort1: "3",
                    Sort2: "3",
                    IconPath1: "10001",
                },
                {
                    ID: "10002",
                    Name: "基础发型",
                    Gender: "2",
                    Type: "0",
                    Position: "10.5,317.1,0",
                    Label1: "Label_1:100",
                    Label2: "Label_1:100",
                    Sort1: "4",
                    Sort2: "3",
                    IconPath1: "11101",
                },
                {
                    ID: "13202",
                    Name: "珍珠",
                    Price: "0",
                    star: "1",
                    Gender: "2",
                    Type: "7",
                    Position: "13.8,263,0",
                    Label1: "Label_1:4000",
                    Label2: "Label_2:2000",
                    Sort1: "6",
                    Sort2: "2",
                    IconPath1: "13202",
                },
                {
                    ID: "10101",
                    Name: "阳光",
                    Price: "0",
                    star: "1",
                    Gender: "2",
                    Type: "0",
                    Position: "17.8,315.1,0",
                    Label1: "Label_1:500",
                    Label2: "Label_2:250",
                    Sort1: "7",
                    Sort2: "2",
                    Icon: "icon_10101",
                    IconPath1: "10101",
                },
                {
                    ID: "10102",
                    Name: "轻柔",
                    Price: "0",
                    star: "1",
                    Gender: "2",
                    Type: "3",
                    Position: "19.6,192,0",
                    Label1: "Label_1:2000",
                    Label2: "Label_2:1000",
                    Sort1: "3",
                    Sort2: "2",
                    IconPath1: "10102",
                },
                {
                    ID: "10103",
                    Name: "舒适",
                    Price: "0",
                    star: "1",
                    Gender: "2",
                    Type: "4",
                    Position: "3.3,32.5,0",
                    Label1: "Label_1:2000",
                    Label2: "Label_2:1000",
                    Sort1: "6",
                    Sort2: "6",
                    Icon: "10103_icon",
                    IconPath1: "10103_1",
                    IconPath2: "10103_2",
                    Position2: "64.9,-33.4,0",
                },
                {
                    ID: "10104",
                    Name: "黑丝",
                    Price: "0",
                    star: "1",
                    Gender: "2",
                    Type: "5",
                    Position: "23,-220.7,0",
                    Label1: "Label_1:500",
                    Label2: "Label_2:250",
                    Sort1: "2",
                    Sort2: "2",
                    IconPath1: "10104",
                },
                {
                    ID: "10105",
                    Name: "可爱皮鞋",
                    Price: "0",
                    star: "1",
                    Gender: "2",
                    Type: "6",
                    Position: "25.7,-359.6,0",
                    Label1: "Label_1:500",
                    Label2: "Label_2:250",
                    Sort1: "4",
                    Sort2: "2",
                    IconPath1: "10105",
                },
                {
                    ID: "10106",
                    Name: "小圆帽",
                    Price: "0",
                    star: "1",
                    Gender: "2",
                    Type: "7",
                    Position: "23,396,0",
                    Label1: "Label_1:500",
                    Label2: "Label_2:250",
                    Sort1: "8",
                    Sort2: "1",
                    IconPath1: "10106_1",
                    IconPath2: "10106_2",
                    Position2: "21.4,373.5,0",
                },
                {
                    ID: "10201",
                    Name: "海风",
                    Price: "1",
                    star: "3",
                    Gender: "2",
                    Type: "7",
                    Position: "3.4,-34.6,0",
                    Label1: "Label_4:500",
                    Label2: "Label_5:250",
                    Sort1: "6",
                    Sort2: "1",
                    Icon: "10201_icon",
                    IconPath1: "10201_1",
                    IconPath2: "10201_2",
                    Position2: "17.1,-49.4,0",
                },
                {
                    ID: "10202",
                    Name: "诱惑",
                    Price: "1",
                    star: "2",
                    Gender: "2",
                    Type: "3",
                    Position: "36.9,163.5,0",
                    Label1: "Label_4:2000",
                    Label2: "Label_5:1000",
                    Sort1: "3",
                    Sort2: "2",
                    IconPath1: "10202",
                },
                {
                    ID: "10203",
                    Name: "轻纱",
                    Price: "1",
                    star: "2",
                    Gender: "2",
                    Type: "4",
                    Position: "3.4,51.8,0",
                    Label1: "Label_4:2000",
                    Label2: "Label_5:1000",
                    Sort1: "3",
                    Sort2: "2",
                    IconPath1: "10203",
                },
                {
                    ID: "20101",
                    Name: "布偶",
                    Price: "0",
                    star: "1",
                    Gender: "2",
                    Type: "1",
                    Position: "15.1,113,0",
                    Label1: "Label_1:6000",
                    Label2: "Label_2:3000",
                    Sort1: "4",
                    Sort2: "2",
                    IconPath1: "20101",
                },
                {
                    ID: "20102",
                    Name: "粉色",
                    Price: "0",
                    star: "1",
                    Gender: "2",
                    Type: "5",
                    Position: "23.7,-288.4,0",
                    Label1: "Label_1:800",
                    Label2: "Label_2:400",
                    Sort1: "2",
                    Sort2: "2",
                    IconPath1: "20102",
                },
                {
                    ID: "20103",
                    Name: "红色皮鞋",
                    Price: "0",
                    star: "1",
                    Gender: "2",
                    Type: "6",
                    Position: "30.1,-347.2,0",
                    Label1: "Label_1:800",
                    Label2: "Label_2:400",
                    Sort1: "4",
                    Sort2: "2",
                    IconPath1: "20103",
                },
                {
                    ID: "20201",
                    Name: "青春",
                    Price: "0",
                    star: "1",
                    Gender: "2",
                    Type: "0",
                    Position: "23.29,363.2,0",
                    Label1: "Label_2:1000",
                    Label2: "Label_1:500",
                    Sort1: "3",
                    Sort2: "2",
                    Icon: "icon_20201",
                    IconPath1: "20201",
                },
                {
                    ID: "20202",
                    Name: "校服",
                    Price: "1",
                    star: "2",
                    Gender: "2",
                    Type: "3",
                    Position: "7.6,152.5,0",
                    Label1: "Label_2:2500",
                    Label2: "Label_1:1250",
                    Sort1: "4",
                    Sort2: "2",
                    IconPath1: "20202",
                },
                {
                    ID: "20203",
                    Name: "校服短裙",
                    Price: "1",
                    star: "2",
                    Gender: "2",
                    Type: "4",
                    Position: "7.6,52,0",
                    Label1: "Label_2:2500",
                    Label2: "Label_1:1250",
                    Sort1: "3",
                    Sort2: "2",
                    IconPath1: "20203",
                },
                {
                    ID: "20204",
                    Name: "黑色长袜",
                    Price: "1",
                    star: "3",
                    Gender: "2",
                    Type: "5",
                    Position: "28.33,-278.5,0",
                    Label1: "Label_2:800",
                    Label2: "Label_1:400",
                    Sort1: "2",
                    Sort2: "2",
                    IconPath1: "20204",
                },
                {
                    ID: "20205",
                    Name: "小皮鞋",
                    Price: "1",
                    star: "2",
                    Gender: "2",
                    Type: "6",
                    Position: "23,-365,0",
                    Label1: "Label_2:800",
                    Label2: "Label_1:400",
                    Sort1: "4",
                    Sort2: "2",
                    IconPath1: "20205",
                },
                {
                    ID: "30102",
                    Name: "甜蜜",
                    Price: "1",
                    star: "3",
                    Gender: "2",
                    num: "5",
                    Type2: "2_1_3",
                    Type: "1",
                    Position: "1.3,102.3,0",
                    Label1: "Label_1:7000",
                    Label2: "Label_2:3500",
                    Sort1: "4",
                    Sort2: "1",
                    Icon: "30102_icon",
                    IconPath1: "30102_1",
                    IconPath2: "30102_2",
                    Position2: "59.4,105.5,0",
                },
                {
                    ID: "30103",
                    Name: "粉色条纹",
                    Price: "1",
                    star: "3",
                    Gender: "2",
                    num: "5",
                    Type2: "2_1_4",
                    Type: "5",
                    Position: "24.2,-243.3,0",
                    Label1: "Label_1:1100",
                    Label2: "Label_2:550",
                    Sort1: "2",
                    Sort2: "2",
                    IconPath1: "30103",
                },
                {
                    ID: "30104",
                    Name: "粉色皮鞋",
                    Price: "1",
                    star: "3",
                    Gender: "2",
                    num: "5",
                    Type2: "2_1_5",
                    Type: "6",
                    Position: "24.1,-361.8,0",
                    Label1: "Label_1:1100",
                    Label2: "Label_2:550",
                    Sort1: "4",
                    Sort2: "2",
                    IconPath1: "30104",
                },
                {
                    ID: "30105",
                    Name: "发卡",
                    Price: "1",
                    star: "3",
                    Gender: "2",
                    num: "5",
                    Type2: "2_1_1",
                    Type: "7",
                    Position: "16.8,386.2,0",
                    Label1: "Label_1:1500",
                    Label2: "Label_2:750",
                    Sort1: "8",
                    Sort2: "2",
                    IconPath1: "30105",
                },
                {
                    ID: "30201",
                    Name: "清凉",
                    Price: "0",
                    star: "1",
                    Gender: "2",
                    Type: "0",
                    Position: "12.6,358.2,0",
                    Label1: "Label_6:1500",
                    Label2: "Label_1:750",
                    Sort1: "3",
                    Sort2: "2",
                    Icon: "icon_30201",
                    IconPath1: "30201",
                },
                {
                    ID: "30202",
                    Name: "水手服",
                    Price: "1",
                    star: "3",
                    Gender: "2",
                    Type: "3",
                    Position: "18.30,207.2,0",
                    Label1: "Label_6:3000",
                    Label2: "Label_1:1500",
                    Sort1: "4",
                    Sort2: "2",
                    IconPath1: "30202",
                },
                {
                    ID: "30203",
                    Name: "水手裙",
                    Price: "1",
                    star: "3",
                    Gender: "2",
                    Type: "4",
                    Position: "6.4,63.2,0",
                    Label1: "Label_6:3000",
                    Label2: "Label_1:1500",
                    Sort1: "3",
                    Sort2: "2",
                    IconPath1: "30203",
                },
                {
                    ID: "30205",
                    Name: "海边",
                    Price: "0",
                    star: "3",
                    Gender: "2",
                    Type: "6",
                    Position: "20.9,-362.5,0",
                    Label1: "Label_6:1100",
                    Label2: "Label_1:550",
                    Sort1: "4",
                    Sort2: "2",
                    IconPath1: "30205",
                },
                {
                    ID: "40101",
                    Name: "披肩长发",
                    Price: "1",
                    star: "1",
                    Gender: "2",
                    Type: "0",
                    Position: "15.6,351,0",
                    Label1: "Label_3:2000",
                    Label2: "Label_5:1000",
                    Sort1: "3",
                    Sort2: "1",
                    Icon: "icon_40101",
                    IconPath1: "40101_1",
                    IconPath2: "40101_2",
                    Position2: "33.32,179.5,0",
                },
                {
                    ID: "40102",
                    Name: "公主",
                    Price: "1",
                    star: "3",
                    Gender: "2",
                    Type: "1",
                    Position: "24.3,15.5,0",
                    Label1: "Label_3:8000",
                    Label2: "Label_5:4000",
                    Sort1: "4",
                    Sort2: "2",
                    IconPath1: "40102",
                },
                {
                    ID: "40104",
                    Name: "高跟鞋",
                    Price: "0",
                    star: "2",
                    Gender: "2",
                    Type: "6",
                    Position: "46.7,-329.8,0",
                    Label1: "Label_3:1300",
                    Label2: "Label_5:650",
                    Sort1: "4",
                    Sort2: "2",
                    IconPath1: "40104",
                },
                {
                    ID: "40105",
                    Name: "诱惑",
                    Price: "1",
                    star: "3",
                    Gender: "2",
                    Type: "7",
                    Position: "51.5,415.2,0",
                    Label1: "Label_3:2000",
                    Label2: "Label_5:1000",
                    Sort1: "8",
                    Sort2: "5",
                    IconPath1: "40105_1",
                    IconPath2: "40105_2",
                    Position2: "31.5,285.4,0",
                },
                {
                    ID: "40201",
                    Name: "成熟",
                    Price: "1",
                    star: "3",
                    Gender: "2",
                    num: "5",
                    Type2: "2_1_2",
                    Type: "0",
                    Position: "21.4,345.06,0",
                    Label1: "Label_4:2000",
                    Label2: "Label_2:1000",
                    Sort1: "3",
                    Sort2: "2",
                    Icon: "icon_40201",
                    IconPath1: "40201",
                },
                {
                    ID: "40202",
                    Name: "端庄",
                    Price: "1",
                    star: "2",
                    Gender: "2",
                    Type: "3",
                    Position: "3.4,151.5,0",
                    Label1: "Label_4:3500",
                    Label2: "Label_2:1750",
                    Sort1: "4",
                    Sort2: "1",
                    Icon: "40202_icon",
                    IconPath1: "40202_1",
                    IconPath2: "40202_2",
                    Position2: "17.1,262,0",
                },
                {
                    ID: "40203",
                    Name: "性感",
                    Price: "1",
                    star: "2",
                    Gender: "2",
                    Type: "4",
                    Position: "17.10,-89.6,0",
                    Label1: "Label_4:3500",
                    Label2: "Label_2:1750",
                    Sort1: "4",
                    Sort2: "2",
                    IconPath1: "40203",
                },
                {
                    ID: "40204",
                    Name: "稳重",
                    Price: "1",
                    star: "2",
                    Gender: "2",
                    Type: "6",
                    Position: "23.9,-355.5,0",
                    Label1: "Label_4:1300",
                    Label2: "Label_2:650",
                    Sort1: "5",
                    Sort2: "2",
                    IconPath1: "40204",
                },
                {
                    ID: "50101",
                    Name: "紫色",
                    Price: "1",
                    star: "2",
                    Gender: "2",
                    Type: "0",
                    Position: "9.8,340.6,0",
                    Label1: "Label_1:2500",
                    Label2: "Label_5:1250",
                    Sort1: "3",
                    Sort2: "2",
                    Icon: "icon_50101",
                    IconPath1: "50101",
                },
                {
                    ID: "50102",
                    Name: "女仆",
                    Price: "1",
                    star: "3",
                    Gender: "2",
                    Type: "1",
                    Position: "12.2,105.95,0",
                    Label1: "Label_1:9000",
                    Label2: "Label_5:4500",
                    Sort1: "4",
                    Sort2: "2",
                    IconPath1: "50102",
                },
                {
                    ID: "50103",
                    Name: "碎边袜",
                    Price: "1",
                    star: "3",
                    Gender: "2",
                    Type: "5",
                    Position: "23.8,-307.3,0",
                    Label1: "Label_1:1600",
                    Label2: "Label_5:800",
                    Sort1: "2",
                    Sort2: "2",
                    IconPath1: "50103",
                },
                {
                    ID: "50104",
                    Name: "紫色皮鞋",
                    Price: "0",
                    star: "2",
                    Gender: "2",
                    Type: "6",
                    Position: "24.2,-362.4,0",
                    Label1: "Label_1:1300",
                    Label2: "Label_5:650",
                    Sort1: "4",
                    Sort2: "2",
                    IconPath1: "50104",
                },
                {
                    ID: "50201",
                    Name: "天真",
                    Price: "1",
                    star: "2",
                    Gender: "2",
                    Type: "0",
                    Position: "7.4,317.5,0",
                    Label1: "Label_3:2500",
                    Label2: "Label_2:1250",
                    Sort1: "5",
                    Sort2: "2",
                    Icon: "icon_50201",
                    IconPath1: "50201",
                },
                {
                    ID: "50202",
                    Name: "公主裙2",
                    Price: "1",
                    star: "2",
                    Gender: "2",
                    Type: "1",
                    Position: "8.2,73.46,0",
                    Label1: "Label_3:9000",
                    Label2: "Label_2:4500",
                    Sort1: "4",
                    Sort2: "2",
                    IconPath1: "50202",
                },
                {
                    ID: "50203",
                    Name: "优雅",
                    Price: "1",
                    star: "2",
                    Gender: "2",
                    Type: "6",
                    Position: "27.1,-324.9,0",
                    Label1: "Label_3:1300",
                    Label2: "Label_2:650",
                    Sort1: "4",
                    Sort2: "2",
                    IconPath1: "50203",
                },
                {
                    ID: "50204",
                    Name: "花帽",
                    Price: "0",
                    star: "3",
                    Gender: "2",
                    Type: "7",
                    Position: "32.4,368.3,0",
                    Label1: "Label_3:2500",
                    Label2: "Label_2:1250",
                    Sort1: "8",
                    Sort2: "2",
                    IconPath1: "50204",
                },
                {
                    ID: "10301",
                    Name: "飘逸",
                    Price: "2",
                    star: "3",
                    Gender: "2",
                    Type: "0",
                    Position: "17.1,354,0",
                    Label1: "Label_4:2500",
                    Label2: "Label_3:1250",
                    Sort1: "4",
                    Sort2: "1",
                    Icon: "icon_10301",
                    IconPath1: "10301_1",
                    IconPath2: "10301_2",
                    Position2: "47.2,182.2,0",
                },
                {
                    ID: "10303",
                    Name: "红色诱惑",
                    Price: "2",
                    star: "3",
                    Gender: "2",
                    Type: "3",
                    Position: "23,144.5,0",
                    Label1: "Label_4:4000",
                    Label2: "Label_3:2000",
                    Sort1: "3",
                    Sort2: "1",
                    IconPath1: "10303_1",
                    IconPath2: "10303_2",
                    Position2: "-15.8,-39,0",
                },
                {
                    ID: "10304",
                    Name: "红色性感",
                    Price: "2",
                    star: "3",
                    Gender: "2",
                    Type: "4",
                    Position: "27.4,-132.1,0",
                    Label1: "Label_4:4000",
                    Label2: "Label_3:2000",
                    Sort1: "4",
                    Sort2: "1",
                    Icon: "10304_icon",
                    IconPath1: "10304_1",
                    IconPath2: "10304_2",
                    Position2: "26.4,-115,0",
                },
                {
                    ID: "10305",
                    Name: "红色皮鞋",
                    Price: "2",
                    star: "3",
                    Gender: "2",
                    Type: "6",
                    Position: "13.8,-373.6,0",
                    Label1: "Label_4:1300",
                    Label2: "Label_3:650",
                    Sort1: "7",
                    Sort2: "2",
                    Icon: "10305_icon",
                    IconPath1: "10305_1",
                },
                {
                    ID: "10401",
                    Name: "灰白",
                    Price: "1",
                    star: "3",
                    Gender: "2",
                    num: "4",
                    Type2: "1_1_2",
                    Type: "0",
                    Position: "23.29,363.2,0",
                    Label1: "Label_3:1500",
                    Label2: "Label_5:750",
                    Sort1: "3",
                    Sort2: "2",
                    Icon: "icon_10401",
                    IconPath1: "10301",
                },
                {
                    ID: "10402",
                    Name: "可爱连衣裙",
                    Price: "1",
                    star: "3",
                    Gender: "2",
                    num: "4",
                    Type2: "1_1_3",
                    Type: "1",
                    Position: "7.7,87.5,0",
                    Label1: "Label_3:3000",
                    Label2: "Label_5:1500",
                    Sort1: "4",
                    Sort2: "2",
                    IconPath1: "10302",
                },
                {
                    ID: "10403",
                    Name: "大白兔",
                    Price: "1",
                    star: "3",
                    Gender: "2",
                    num: "4",
                    Type2: "1_1_4",
                    Type: "6",
                    Position: "23.29,-370,0",
                    Label1: "Label_3:3000",
                    Label2: "Label_5:1500",
                    Sort1: "5",
                    Sort2: "2",
                    IconPath1: "10303",
                },
                {
                    ID: "10405",
                    Name: "发卡",
                    Price: "1",
                    star: "3",
                    Gender: "2",
                    num: "4",
                    Type2: "1_1_1",
                    Type: "7",
                    Position: "15.1,393.2,0",
                    Label1: "Label_3:1300",
                    Label2: "Label_5:650",
                    Sort1: "8",
                    Sort2: "2",
                    IconPath1: "10305",
                },
                {
                    ID: "20301",
                    Name: "海军制服",
                    Price: "1",
                    star: "3",
                    Gender: "2",
                    Type: "3",
                    Position: "7.98,166,0",
                    Label1: "Label_2:2500",
                    Label2: "Label_3:1250",
                    Sort1: "4",
                    Sort2: "1",
                    IconPath1: "20301",
                    Position2: "17.1,262,0",
                },
                {
                    ID: "20302",
                    Name: "海军下装",
                    Price: "1",
                    star: "3",
                    Gender: "2",
                    Type: "4",
                    Position: "5.7,56.6,0",
                    Label1: "Label_2:2500",
                    Label2: "Label_3:1250",
                    Sort1: "3",
                    Sort2: "2",
                    IconPath1: "20302",
                },
                {
                    ID: "20303",
                    Name: "海皮鞋",
                    Price: "1",
                    star: "3",
                    Gender: "2",
                    Type: "6",
                    Position: "21.40,-216,0",
                    Label1: "Label_2:1200",
                    Label2: "Label_3:600",
                    Sort1: "3",
                    Sort2: "2",
                    IconPath1: "20303",
                },
                {
                    ID: "20304",
                    Name: "军帽",
                    Price: "1",
                    star: "3",
                    Gender: "2",
                    Type: "7",
                    Position: "13.8,404.4,0",
                    Label1: "Label_2:3000",
                    Label2: "Label_3:1500",
                    Sort1: "7",
                    Sort2: "2",
                    IconPath1: "20304",
                },
                {
                    ID: "30301",
                    Name: "麻花辫",
                    Price: "0",
                    star: "3",
                    Gender: "2",
                    Type: "0",
                    Position: "26.93,351.5,0",
                    Label1: "Label_3:1500",
                    Label2: "Label_5:750",
                    Sort1: "3",
                    Sort2: "1",
                    Icon: "30301_icon",
                    IconPath1: "30301_1",
                    IconPath2: "30301_2",
                    Position2: "97,260,0",
                },
                {
                    ID: "30302",
                    Name: "披肩斗篷",
                    Price: "1",
                    star: "3",
                    Gender: "2",
                    Type: "3",
                    Position: "18.1,143,0",
                    Label1: "Label_3:3000",
                    Label2: "Label_5:1500",
                    Sort1: "4",
                    Sort2: "2",
                    IconPath1: "30302",
                },
                {
                    ID: "30303",
                    Name: "武士服",
                    Price: "1",
                    star: "3",
                    Gender: "2",
                    Type: "4",
                    Position: "6.6,41,0",
                    Label1: "Label_3:3000",
                    Label2: "Label_5:1500",
                    Sort1: "5",
                    Sort2: "2",
                    IconPath1: "30303",
                },
                {
                    ID: "30304",
                    Name: "黑丝",
                    Price: "1",
                    star: "3",
                    Gender: "2",
                    Type: "5",
                    Position: "23.30,-199.83,0",
                    Label1: "Label_3:1300",
                    Label2: "Label_5:650",
                    Sort1: "2",
                    Sort2: "2",
                    IconPath1: "30305",
                },
                {
                    ID: "30305",
                    Name: "重甲",
                    Price: "1",
                    star: "3",
                    Gender: "2",
                    Type: "6",
                    Position: "26.8,-286.8,0",
                    Label1: "Label_3:1300",
                    Label2: "Label_5:650",
                    Sort1: "4",
                    Sort2: "2",
                    IconPath1: "30306",
                },
                {
                    ID: "40301",
                    Name: "灵逸",
                    Price: "1",
                    star: "3",
                    Gender: "2",
                    num: "6",
                    Type2: "2_2_2",
                    Type: "0",
                    Position: "10.5,308,0",
                    Label1: "Label_1:2000",
                    Label2: "Label_5:1000",
                    Sort1: "3",
                    Sort2: "1",
                    Icon: "40301_icon",
                    IconPath1: "40301_1",
                    IconPath2: "40301_2",
                    Position2: "11.5,222,0",
                },
                {
                    ID: "40302",
                    Name: "彩带上衣",
                    Price: "1",
                    star: "3",
                    Gender: "2",
                    num: "6",
                    Type2: "2_2_3",
                    Type: "3",
                    Position: "35.3,110.5,0",
                    Label1: "Label_1:3500",
                    Label2: "Label_5:1750",
                    Sort1: "4",
                    IconPath1: "40302",
                },
                {
                    ID: "40303",
                    Name: "碎边红裙",
                    Price: "1",
                    star: "3",
                    Gender: "2",
                    num: "6",
                    Type2: "2_2_4",
                    Type: "4",
                    Position: "0,7,0",
                    Label1: "Label_1:3500",
                    Label2: "Label_5:1750",
                    Sort1: "4",
                    Sort2: "2",
                    IconPath1: "40303",
                },
                {
                    ID: "40304",
                    Name: "可爱筒袜",
                    Price: "1",
                    star: "3",
                    Gender: "2",
                    num: "6",
                    Type2: "2_2_5",
                    Type: "5",
                    Position: "25.4,-293.5,0",
                    Label1: "Label_1:1300",
                    Label2: "Label_5:650",
                    Sort1: "2",
                    Sort2: "2",
                    IconPath1: "40304",
                },
                {
                    ID: "40305",
                    Name: "铮亮",
                    Price: "1",
                    star: "3",
                    Gender: "2",
                    num: "6",
                    Type2: "2_2_6",
                    Type: "6",
                    Position: "23.29,-367,0",
                    Label1: "Label_1:1300",
                    Label2: "Label_5:650",
                    Sort1: "5",
                    Sort2: "2",
                    IconPath1: "40305",
                },
                {
                    ID: "40306",
                    Name: "蝴蝶",
                    Price: "1",
                    star: "3",
                    Gender: "2",
                    num: "6",
                    Type2: "2_2_1",
                    Type: "7",
                    Position: "37.5,395.2,0",
                    Label1: "Label_1:5000",
                    Label2: "Label_5:2500",
                    Sort1: "1",
                    Sort2: "2",
                    IconPath1: "40306",
                },
                {
                    ID: "50301",
                    Name: "温柔",
                    Price: "1",
                    star: "3",
                    Gender: "2",
                    Type: "0",
                    Position: "10.5,358,0",
                    Label1: "Label_2:2500",
                    Label2: "Label_5:1250",
                    Sort1: "3",
                    Sort2: "2",
                    Icon: "50301_icon",
                    IconPath1: "50301",
                },
                {
                    ID: "50302",
                    Name: "和服",
                    Price: "1",
                    star: "2",
                    Gender: "2",
                    Type: "1",
                    Position: "70.9,53.2,0",
                    Label1: "Label_2:9000",
                    Label2: "Label_5:4500",
                    Sort1: "4",
                    Sort2: "2",
                    IconPath1: "50302",
                },
                {
                    ID: "50303",
                    Name: "木屐",
                    Price: "1",
                    star: "3",
                    Gender: "2",
                    Type: "6",
                    Position: "37.5,-335.1,0",
                    Label1: "Label_2:1300",
                    Label2: "Label_5:650",
                    Sort1: "1",
                    Sort2: "4",
                    IconPath1: "50303_1",
                    IconPath2: "50303_2",
                    Position2: "37.5,-335.1,0",
                },
                {
                    ID: "50304",
                    Name: "向阳花",
                    Price: "1",
                    star: "2",
                    Gender: "2",
                    Type: "7",
                    Position: "-30.3,340.3,0",
                    Label1: "Label_2:2500",
                    Label2: "Label_5:1250",
                    Sort1: "7",
                    Sort2: "2",
                    IconPath1: "50304",
                }
            ];
        }
        LoadJson() {
            let self = this;
            let _res = [
                { url: "config/ClothInfo.json" },
            ];
            let loadXml = function () {
                self.LoadJson2();
            };
            Laya.loader.load(_res, Laya.Handler.create(this, function () {
                loadXml();
            }));
        }
        LoadJson2() {
            console.log("===========>");
            let pack1 = new ClothPackgeData();
            let pack2 = new ClothPackgeData();
            let pack3 = new ClothPackgeData();
            this.ClothJson.forEach((v, k, s) => {
                let temp = new ClothData();
                if (v["ID"]) {
                    temp.ID = parseInt(v["ID"]);
                }
                if (v["Name"]) {
                    temp.Name = v["Name"];
                }
                if (v["NeedItems"]) {
                    temp.NeedItems = v["NeedItems"];
                }
                if (v["Gender"]) {
                    temp.Gender = parseInt(v["Gender"]);
                }
                if (v["Type"]) {
                    temp.Type = parseInt(v["Type"]);
                }
                if (v["Level"]) {
                    temp.Level = parseInt(v["Level"]);
                }
                if (v["Position"]) {
                    temp.Position = v["Position"];
                }
                if (v["Position2"]) {
                    temp.Position2 = v["Position2"];
                }
                if (v["Label1"]) {
                    temp.Label1 = v["Label1"];
                }
                if (v["Label2"]) {
                    temp.Label2 = v["Label2"];
                }
                if (v["Sort1"]) {
                    temp.Sort1 = parseInt(v["Sort1"]);
                }
                if (v["Sort2"]) {
                    temp.Sort2 = parseInt(v["Sort2"]);
                }
                if (v["Price"]) {
                    temp.Price = parseInt(v["Price"]);
                }
                if (v["IconPath1"]) {
                    temp.IconPath1 = v["IconPath1"];
                }
                if (v["IconPath2"]) {
                    temp.IconPath2 = v["IconPath2"];
                }
                if (v["Star"]) {
                    temp.Star = parseInt(v["Star"]);
                }
                if (v["Type2"]) {
                    temp.Type2 = v["Type2"];
                }
                if (v["num"]) {
                    temp.num = parseInt(v["num"]);
                }
                if (temp.ID == 10000 || temp.ID == 10001 || temp.ID == 10002) {
                }
                else {
                    switch (temp.Type) {
                        case clothtype.Hair:
                            GameDataController.HairData.push(temp);
                            break;
                        case clothtype.Dress:
                            GameDataController.DressData.push(temp);
                            break;
                        case clothtype.Shirt:
                            GameDataController.ShirtData.push(temp);
                            break;
                        case clothtype.Trousers:
                            GameDataController.TrousersData.push(temp);
                            break;
                        case clothtype.Socks:
                            GameDataController.SocksData.push(temp);
                            break;
                        case clothtype.Shose:
                            GameDataController.ShoseData.push(temp);
                            break;
                        case clothtype.Ornament:
                            GameDataController.OrnamentData.push(temp);
                            break;
                    }
                }
                if (temp.Type2 != null) {
                    let a = temp.Type2;
                    let arr = a.split("_");
                    if (arr[0] == "1") {
                        if (arr[1] == "1") {
                            pack1.cloths1.push(temp);
                        }
                        if (arr[1] == "2") {
                            pack1.cloths2.push(temp);
                        }
                        if (arr[1] == "3") {
                            pack1.cloths3.push(temp);
                        }
                        if (arr[1] == "4") {
                            pack1.cloths4.push(temp);
                        }
                    }
                    else if (arr[0] == "2") {
                        if (arr[1] == "1") {
                            pack2.cloths1.push(temp);
                        }
                        if (arr[1] == "2") {
                            pack2.cloths2.push(temp);
                        }
                        if (arr[1] == "3") {
                            pack2.cloths3.push(temp);
                        }
                        if (arr[1] == "4") {
                            pack2.cloths4.push(temp);
                        }
                    }
                    else if (arr[0] == "3") {
                        if (arr[1] == "1") {
                            pack3.cloths1.push(temp);
                        }
                        if (arr[1] == "2") {
                            pack3.cloths2.push(temp);
                        }
                        if (arr[1] == "3") {
                            pack3.cloths3.push(temp);
                        }
                        if (arr[1] == "4") {
                            pack3.cloths4.push(temp);
                        }
                    }
                }
                GameDataController.ClothPackge1 = pack1;
                GameDataController.ClothPackge2 = pack2;
                GameDataController.ClothPackge3 = pack3;
                GameDataController._clothData.set(temp.ID, temp);
                GameDataController.ClothDataAsy[temp.ID] = temp.Price == 0 ? 0 : 1;
            });
            let firstuse = Laya.LocalStorage.getItem("firstuse");
            if (firstuse) {
                if (firstuse == "0") {
                    Laya.LocalStorage.setJSON("ClothData", GameDataController.ClothDataAsy);
                    Laya.LocalStorage.setItem("firstuse", "1");
                }
                else {
                    let Update = {};
                    let oldClothData = Laya.LocalStorage.getJSON("ClothData");
                    let newClothData = GameDataController.ClothDataAsy;
                    for (let k in newClothData) {
                        let value = GameDataController.ClothDataRefresh[k];
                        if (value != null) {
                            Update[k] = value;
                        }
                        else {
                            console.log("新ID", k);
                            Update[k] = 0;
                        }
                    }
                    Laya.LocalStorage.setJSON("ClothData", Update);
                }
            }
            else {
                Laya.LocalStorage.setJSON("ClothData", GameDataController.ClothDataAsy);
                Laya.LocalStorage.setItem("firstuse", "1");
            }
            console.log("===========》");
            console.log("_ClothData", GameDataController._ClothData);
            GameDataController._ClothData.forEach((v) => {
                if (v.GetPath1()) {
                    Laya.loader.load(v.GetPath1());
                }
            });
            EventMgr.notify("sgl1");
        }
    }

    class UIPreload extends UIBase {
        constructor() {
            super(...arguments);
            this._openType = OpenType.Once;
            this._fadeIn = false;
        }
        StartLoading() {
        }
        onInit() {
            let cfg = new ConfigData();
            setTimeout(() => {
                console.log("开始加载资源延迟5s");
                Laya.loader.create("Prefab/CoinPref.prefab");
                cfg.LoadJson();
            }, 500);
            let callBack = () => {
                GameMgr.fsm.to("Game_Ready", 0);
            };
            EventMgr.reg("sgl1", this, callBack);
            this.prg = this.initPrg("Prg");
        }
        onShow() {
            EventMgr.reg(GameEvent.preloadStep, this, this.onLoadStep);
            EventMgr.reg(GameEvent.preloadCpl, this, this.onLoadCpl);
            GameMgr.readyAll();
        }
        onHide() {
            EventMgr.offCaller(this);
        }
        onLoadStep(value) {
        }
        onLoadCpl() {
            ADManager.initShare();
        }
    }

    class UIReady extends UIBase {
        constructor() {
            super(...arguments);
            this.clothisopen = true;
            this.newmap = new Map();
        }
        onInit() {
            this.windowheight = Laya.Browser.height;
            this.windowwidth = Laya.Browser.width;
            if (Laya.LocalStorage.getItem("Sign")) {
            }
            else {
                GameDataController.setFirstLoginTime();
            }
            this.btnEv("ClothOpenBtn", this.ClothOpenBtnClick);
            this.btnEv("ActiveBtn", this.ActiveClick);
            this.btnEv("ClothReceive", () => {
                ClothChange.Instance.ClothReceive();
                BagListController.Instance.ClothesPageChange(BagListController.Instance.SelectIndex);
            });
            this.btnEv("PhotoBtn", () => {
                UIMgr.show("UIPhotos");
            });
            this.btnEv("Share", () => {
                ClothChange.Instance.Share();
            });
            this.ShowView = this.vars("ShowView");
            this.BtnBar = this.vars("BtnBar");
            this.ClothOpenBtn = this.vars("ClothOpenBtn");
            this.FemaleRoot = this.vars("FemaleRoot");
            this.BagAll = this.vars("BagALL");
            this.Ubag = TweenMgr.tweenCust(300, this, this.tweenbagUp, null, true, Laya.Ease.linearNone);
            this.Lbtn = TweenMgr.tweenCust(300, this, this.tweenbtnLeft, null, true, Laya.Ease.linearNone);
            this.btnU = TweenMgr.tweenCust(200, this, this.RoteUp, null, true, Laya.Ease.linearNone);
            this.FRS = TweenMgr.tweenCust(300, this, this.tweenFBTSmall, null, true, Laya.Ease.backIn);
            this.Dbag = TweenMgr.tweenCust(300, this, this.tweenbagDown, null, true, Laya.Ease.backOut);
            this.Rbtn = TweenMgr.tweenCust(300, this, this.tweenbtnRight, null, true, Laya.Ease.backOut);
            this.btnD = TweenMgr.tweenCust(200, this, this.RoteDown, null, true, Laya.Ease.linearNone);
            this.FRB = TweenMgr.tweenCust(300, this, this.tweenFBTBig, null, true, Laya.Ease.backOut);
            console.log("this.newmap", GameDataController.ClothDataAsy);
            if (GameDataController.IsNewDay()) {
                console.log("GameDataController.IsNewDay", GameDataController.TodaySign);
                GameDataController.TodaySign = "0";
            }
            let havesign = GameDataController.TodaySign;
            if (havesign) {
                if (havesign == "1") {
                }
                else {
                    UIMgr.show("UISign");
                }
            }
            else {
                UIMgr.show("UISign");
                GameDataController.TodaySign = "0";
            }
        }
        ActiveClick() {
            UIMgr.show("UIActive");
        }
        buyFun() {
        }
        RefreshUI() {
        }
        onShow() {
            this.RefreshUI();
        }
        onHide() {
        }
        ClothOpenBtnClick() {
            if (this.clothisopen) {
                console.log("消失");
                this.Dbag.play();
                this.btnU.play();
                this.FRB.play();
                let a = Laya.LocalStorage.getJSON("ClothData");
            }
            else {
                console.log("展示");
                this.Ubag.play();
                this.btnD.play();
                this.FRS.play();
            }
            this.clothisopen = !this.clothisopen;
        }
        RoteDown(t) {
            let nbtm = this.ClothOpenBtn.rotation;
            TweenMgr.lerp_Num(nbtm, 180, t);
            this.ClothOpenBtn.rotation = t.outParams[0][0];
        }
        RoteUp(t) {
            let nbtm = this.ClothOpenBtn.rotation;
            TweenMgr.lerp_Num(nbtm, 0, t);
            this.ClothOpenBtn.rotation = t.outParams[0][0];
        }
        tweenbagUp(t) {
            let nbtm = this.BagAll.bottom;
            TweenMgr.lerp_Num(nbtm, 0, t);
            this.BagAll.bottom = t.outParams[0][0];
        }
        tweenbagDown(t) {
            let nbtm = this.BagAll.bottom;
            TweenMgr.lerp_Num(nbtm, -485, t);
            this.BagAll.bottom = t.outParams[0][0];
        }
        tweenbtnLeft(t) {
            let nX = this.BtnBar.x;
            TweenMgr.lerp_Num(nX, 75, t);
            this.BtnBar.x = t.outParams[0][0];
        }
        tweenbtnRight(t) {
            let nX = this.BtnBar.x;
            TweenMgr.lerp_Num(nX, GameDataController.windowWidth - 75, t);
            this.BtnBar.x = t.outParams[0][0];
        }
        tweenFBTSmall(t) {
            let nX = this.FemaleRoot.scaleX;
            TweenMgr.lerp_Num(nX, 1, t);
            this.FemaleRoot.scaleX = this.FemaleRoot.scaleY = t.outParams[0][0];
        }
        tweenFBTBig(t) {
            let nX = this.FemaleRoot.scaleX;
            TweenMgr.lerp_Num(nX, 1.3, t);
            this.FemaleRoot.scaleX = this.FemaleRoot.scaleY = t.outParams[0][0];
        }
        onClick_Btnshortcut() {
            UIMgr.show("UIMain");
        }
    }

    class UIMain extends UIBase {
        onInit() {
            this.TouchArea.on(Laya.Event.CLICK, this, () => {
                this.Mouse_Click();
            });
            this.TouchArea.on(Laya.Event.MOUSE_MOVE, this, () => {
                this.Mouse_Move();
            });
            this.TouchArea.on(Laya.Event.MOUSE_UP, this, () => {
                this.Mouse_Up();
            });
            this.TouchArea.on(Laya.Event.MOUSE_DOWN, this, () => {
                this.Mouse_Down();
                Laya.timer.loop(100, this, this.timeradd);
            });
            this.TouchArea.on(Laya.Event.MOUSE_OUT, this, () => {
                this.Mouse_Up();
            });
        }
        timeradd() {
        }
        onShow() {
        }
        Mouse_Click() {
        }
        Mouse_Move() {
        }
        Mouse_Up() {
        }
        Mouse_Down() {
        }
        TimerUpdate() {
        }
        update() {
        }
        onHide() {
        }
        TimeControoler() {
        }
        TimeStart() {
            Laya.timer.loop(10, this, this.TimeControoler);
        }
        TimeStop() {
            Laya.timer.clear(this, this.TimeControoler);
        }
    }

    class RecordManager {
        constructor() {
            this.GRV = null;
            this.isRecordVideoing = false;
            this.isVideoRecord = false;
            this.videoRecordTimer = 0;
            this.isHasVideoRecord = false;
        }
        static Init() {
            RecordManager.grv = new TJ.Platform.AppRt.DevKit.TT.GameRecorderVideo();
        }
        static startAutoRecord() {
            if (TJ.API.AppInfo.Channel() != TJ.Define.Channel.AppRt.ZJTD_AppRt)
                return;
            if (RecordManager.grv == null)
                RecordManager.Init();
            if (RecordManager.recording)
                return;
            RecordManager.autoRecording = true;
            console.log("******************开始录屏");
            RecordManager._start();
            RecordManager.lastRecordTime = Date.now();
        }
        static stopAutoRecord() {
            if (TJ.API.AppInfo.Channel() != TJ.Define.Channel.AppRt.ZJTD_AppRt)
                return;
            if (!RecordManager.autoRecording) {
                console.log("RecordManager.autoRecording", RecordManager.autoRecording);
                return false;
            }
            RecordManager.autoRecording = false;
            RecordManager._end(false);
            if (Date.now() - RecordManager.lastRecordTime > 6000) {
                return true;
            }
            if (Date.now() - RecordManager.lastRecordTime < 3000) {
                console.log("小于3秒");
                return false;
            }
            return true;
        }
        static startRecord() {
            if (TJ.API.AppInfo.Channel() != TJ.Define.Channel.AppRt.ZJTD_AppRt)
                return;
            if (RecordManager.autoRecording) {
                this.stopAutoRecord();
            }
            RecordManager.recording = true;
            RecordManager._start();
            RecordManager.lastRecordTime = Date.now();
        }
        static stopRecord() {
            if (TJ.API.AppInfo.Channel() != TJ.Define.Channel.AppRt.ZJTD_AppRt)
                return;
            console.log("time:" + (Date.now() - RecordManager.lastRecordTime));
            if (Date.now() - RecordManager.lastRecordTime <= 3000) {
                return false;
            }
            RecordManager.recording = false;
            RecordManager._end(true);
            return true;
        }
        static _start() {
            if (TJ.API.AppInfo.Channel() != TJ.Define.Channel.AppRt.ZJTD_AppRt)
                return;
            console.log("******************180s  ？？？？？");
            RecordManager.grv.Start(180);
        }
        static _end(share) {
            if (TJ.API.AppInfo.Channel() != TJ.Define.Channel.AppRt.ZJTD_AppRt)
                return;
            console.log("******************180结束 ？？？？？");
            RecordManager.grv.Stop(share);
        }
        static _share(successedAc, failAc = null, completedAc = null) {
            if (TJ.API.AppInfo.Channel() != TJ.Define.Channel.AppRt.ZJTD_AppRt)
                return;
            console.log("******************吊起分享 ？？？？？", RecordManager.grv, RecordManager.grv.videoPath);
            if (RecordManager.grv.videoPath) {
                let p = new TJ.Platform.AppRt.Extern.TT.ShareAppMessageParam();
                p.extra.videoTopics = ["甩锅给队友", "回来吧刺激战场", "番茄小游戏", "抖音小游戏"];
                p.channel = "video";
                p.success = () => {
                    successedAc();
                };
                p.fail = () => {
                    failAc();
                };
                RecordManager.grv.Share(p);
            }
            else {
                UIMgr.tip("暂无录屏，玩一局游戏可以分享");
            }
        }
    }
    RecordManager.recording = false;
    RecordManager.autoRecording = false;

    class UISettle extends UIBase {
        constructor() {
            super(...arguments);
            this._openType = OpenType.Attach;
            this.DefaultTog = true;
        }
        onInit() {
            this.btnEv("BtnHome", () => {
                this.HomeBtn();
            });
        }
        TogClick() {
        }
        onShow() {
            GameMgr.playSound("success");
        }
        HomeBtn() {
            UIMgr.show("UISubMoneyEf", () => {
                UIMgr.show("UIReady");
                this.hide();
            });
        }
        SanBeiBtn() {
            ADManager.Event("ADV_RDA_CLICK_003");
            ADManager.ShowReward(() => {
                UIMgr.show("UISubMoneyEf", () => {
                    UIMgr.show("UIReady");
                    this.hide();
                });
            });
        }
        ShareBtnClick() {
            ADManager.Event("VID_RDA_CLICK_001");
            let sus = () => {
            };
            let fail = () => {
                UIMgr.tip("分享失败");
            };
            RecordManager._share(sus, fail);
        }
    }

    class UISubMoneyEf extends UIBase {
        constructor() {
            super(...arguments);
            this._openType = OpenType.Attach;
        }
        moveFinish() {
            this.hide();
            console.log("paowan");
        }
        ;
        tweenAlphaFinish(fun = null) {
            let json = Laya.loader.getRes("Prefab/CoinPref.prefab").json;
            let pref = new Laya.Prefab();
            pref.json = json;
            let bound = 480;
            let parent = this.owner;
            let icon = this.vars("icon");
            let iconX = icon.x;
            let iconY = icon.y;
            let createNum = 30;
            for (let i = 0; i < createNum; i++) {
                let inst = pref.create();
                parent.addChild(inst);
                inst.x = Util.randomInRange_f(260, 560);
                inst.y = Util.randomInRange_f(340, 840);
                TweenMgr.tweenTiny(100, this, (t) => {
                    inst.scale(t.factor, t.factor);
                }, () => {
                    TweenMgr.tweenTiny(400, this, (t) => {
                        let inParams = t.getPG("inParams", 0);
                        if (inParams.length == 0) {
                            inParams[0] = inst.x;
                            inParams[1] = iconX - inst.x;
                            inParams[2] = inst.y;
                            inParams[3] = iconY - inst.y;
                        }
                        inst.x = inParams[0] + inParams[1] * t.factor;
                        inst.y = inParams[2] + inParams[3] * t.factor;
                        if (t.factor >= 1) {
                            inst.destroy();
                        }
                    }, (i == createNum - 1) ? () => {
                        fun();
                        this.moveFinish();
                    } : null, false, Laya.Ease.linearNone, 550);
                }, false, Laya.Ease.linearNone, Util.randomInRange_f(0, 15) * i);
            }
        }
        onShow(arg = null) {
            this.tweenAlphaFinish(arg);
        }
    }

    class UIActive extends UIBase {
        constructor() {
            super(...arguments);
            this._openType = OpenType.Attach;
            this.Data = [];
        }
        onInit() {
            this.ActiveList = this.vars("ActiveList");
            this.ActiveList.vScrollBarSkin = "";
            this.Refresh();
            this.ActiveList.renderHandler = new Laya.Handler(this, this.onWrapItem);
            this.btnEv("CloseBtn", () => {
                this.hide();
            });
        }
        onWrapItem(cell, index) {
            cell.getComponent(ActiveItem).fell(this.Data[index], index);
        }
        onShow() {
            this.Refresh();
        }
        Refresh() {
            this.Data.length = 0;
            let data = [];
            if (GameDataController.ClothPackge2.cloths1.length > 0) {
                data.push(GameDataController.ClothPackge2.cloths1);
            }
            if (GameDataController.ClothPackge2.cloths2.length > 0) {
                data.push(GameDataController.ClothPackge2.cloths2);
            }
            if (GameDataController.ClothPackge2.cloths3.length > 0) {
                data.push(GameDataController.ClothPackge2.cloths3);
            }
            if (GameDataController.ClothPackge2.cloths4.length > 0) {
                data.push(GameDataController.ClothPackge2.cloths4);
            }
            this.Data = data;
            this.ActiveList.refresh();
            this.ActiveList.array = this.Data;
            console.log("UIActive", this.Data);
        }
    }
    class clothbag extends Laya.Script {
        constructor() {
            super(...arguments);
            this.cloths = [];
        }
    }

    class SignBtn extends Laya.Script {
        constructor() {
            super(...arguments);
            this.MaxHeight = 90;
            this.MaxWidth = 90;
            this.BtnID = 0;
            this.BtnIndex = 0;
        }
        onAwake() {
            let item = this.owner;
            this.ADBtn = item.getChildByName("ADBtn");
            this.Btn = item.getChildByName("Btn");
            this.Lock = item.getChildByName("Lock");
            this.Icon = item.getChildByName("icon");
            this.Btn.on(Laya.Event.CLICK, this, this.BtnClick);
            this.ADBtn.on(Laya.Event.CLICK, this, this.ADBtnClick);
        }
        Fell(mes, index) {
            this.BtnIndex = index;
            this.data = mes;
            this.Icon.skin = this.data.GetPath1();
            this.BtnID = this.data.ID;
            let imageHeight = parseFloat(this.Icon.height.toString());
            let imagewidth = parseFloat(this.Icon.width.toString());
            let pr = 0;
            if (imagewidth > imageHeight) {
                pr = this.MaxWidth / imagewidth;
            }
            else {
                pr = this.MaxHeight / imageHeight;
            }
            this.Icon.scaleX = pr;
            this.Icon.scaleY = pr;
            this.Icon.centerX = 0;
            this.Icon.centerY = 0;
            let days = GameDataController.GetFirstToNow();
            console.log("SignBtn,Fell,GameDataController.ClothDataRefresh", GameDataController.ClothDataRefresh[this.BtnID]);
            if (GameDataController.ClothDataRefresh[this.BtnID] == 1) {
                if (days - 1 > index) {
                    console.log("过期的");
                    this.ADSignBtnOn();
                }
                else if (days - 1 == index) {
                    console.log("当前天");
                    this.SignBtnOn();
                }
                else {
                    console.log("过后天");
                    this.BtnClose();
                }
            }
            else {
                console.log("SignBtn,Fell  this.BtnID已解锁 ", this.BtnID);
                this.BtnClose();
            }
        }
        Refresh() {
            let a = GameDataController.ClothDataRefresh[this.data.ID];
            this.Lock.visible = (a == 1);
        }
        BtnClick() {
            GameDataController.TodaySign = "1";
            GameDataController.SetLastTime();
            console.log("今日签到成功");
            let dataall = GameDataController.ClothDataRefresh;
            dataall[this.BtnID] = 0;
            GameDataController.ClothDataRefresh = dataall;
            BagListController.Instance.refresh();
            UIMgr.get("UISign").Refresh();
        }
        ADBtnClick() {
            console.log("补签", this.BtnIndex);
            ADManager.ShowReward(() => {
                GameDataController.SetLastTime();
                console.log("补签成功");
                let dataall = GameDataController.ClothDataRefresh;
                dataall[this.BtnID] = 0;
                GameDataController.ClothDataRefresh = dataall;
                UIMgr.get("UISign").onHide();
            });
        }
        SignBtnOn() {
            let dataall = GameDataController.ClothDataRefresh;
            if (dataall[this.BtnID] == 0) {
                this.BtnClose();
            }
            else {
                this.ADBtn.visible = false;
                this.Btn.visible = true;
            }
        }
        ADSignBtnOn() {
            let dataall = GameDataController.ClothDataRefresh;
            if (dataall[this.BtnID] == 0) {
                this.BtnClose();
            }
            else {
                this.ADBtn.visible = true;
                this.Btn.visible = false;
            }
        }
        BtnClose() {
            this.ADBtn.visible = false;
            this.Btn.visible = false;
        }
    }

    class UISign extends UIBase {
        constructor() {
            super(...arguments);
            this._openType = OpenType.Attach;
            this.Data = [];
            this.BtnBar = [];
            this.str = {};
        }
        onInit() {
            this.btnEv("CloseBtn", () => {
                this.hide();
            });
            this.SkinBtnBar = this.vars("SkinBtnBar");
            for (let index = 0; index < this.SkinBtnBar.numChildren; index++) {
                this.SkinBtnBar.getChildAt(index).addComponent(SignBtn);
                this.BtnBar.push(this.SkinBtnBar.getChildAt(index));
            }
        }
        onShow() {
            this.Data = GameDataController.ClothPackge1.cloths1;
            this.Data.forEach((V, i) => {
                let item = this.BtnBar[i].getComponent(SignBtn);
                item.Fell(V, i);
            });
            this.Refresh();
        }
        onRefresh() {
        }
        Refresh() {
            this.Data.forEach((v, i) => {
                let nv = GameDataController.ClothDataRefresh[this.Data[i].ID];
                this.str[this.Data[i].ID] = nv;
                let item = this.BtnBar[i].getComponent(SignBtn);
                item.Fell(v, i);
            });
            GameDataController.ClothdatapackSet(this.Data[0].GetType2, this.str);
        }
        onHide() {
            this.hide();
        }
    }

    class PhotosChange extends Laya.Script {
        constructor() {
            super(...arguments);
            this.photoindex = 0;
            this.photoMax = 0;
            this.mes = [];
        }
        onAwake() {
            this.FemaleRoot = this.owner;
            this.Hair = this.FemaleRoot.getChildByName("Hair");
            this.Hair1 = this.FemaleRoot.getChildByName("Hair1");
            this.Ornament = this.FemaleRoot.getChildByName("Ornament");
            this.Ornament1 = this.FemaleRoot.getChildByName("Ornament1");
            this.Shirt = this.FemaleRoot.getChildByName("Shirt");
            this.Shirt1 = this.FemaleRoot.getChildByName("Shirt1");
            this.Trousers = this.FemaleRoot.getChildByName("Trousers");
            this.Trousers1 = this.FemaleRoot.getChildByName("Trousers1");
            this.Dress = this.FemaleRoot.getChildByName("Dress");
            this.Dress1 = this.FemaleRoot.getChildByName("Dress1");
            this.Socks = this.FemaleRoot.getChildByName("Socks");
            this.Socks1 = this.FemaleRoot.getChildByName("Socks1");
            this.Shose = this.FemaleRoot.getChildByName("Shose");
            this.Shose1 = this.FemaleRoot.getChildByName("Shose1");
            this.Coat = this.FemaleRoot.getChildByName("Coat");
            this.Coat1 = this.FemaleRoot.getChildByName("Coat1");
            this.nophoto = this.FemaleRoot.getChildByName("nophoto");
            for (let i = 0; i < 8; i++) {
                this._ClothChange(0, i);
            }
        }
        _ClothChange(itemID, type) {
            switch (type) {
                case clothtype.Hair:
                    this.HairChange(itemID);
                    break;
                case clothtype.Dress:
                    this.DressChange(itemID);
                    break;
                case clothtype.Coat:
                    this.CoatChange(itemID);
                    break;
                case clothtype.Shirt:
                    this.ShirtChange(itemID);
                    break;
                case clothtype.Trousers:
                    this.TrousersChange(itemID);
                    break;
                case clothtype.Socks:
                    this.SocksChange(itemID);
                    break;
                case clothtype.Shose:
                    this.ShoseChange(itemID);
                    break;
                case clothtype.Ornament:
                    this.OrnamentChange(itemID);
                    break;
            }
        }
        ClothReceive() {
            for (let i = 0; i < 8; i++) {
                this._ClothChange(0, i);
            }
        }
        InitMes() {
            let item = GameDataController.PhotosData;
            console.log("PhotosChange==》item", item);
            if (item) {
                this.mes = item;
            }
            console.log("PhotosChange==mes", this.mes);
            if (this.mes.length <= 0) {
                this.CanShowPhoto = false;
                this.nophoto.visible = true;
                console.log("PhotosChange==》是否可以展示photo", !this.nophoto.visible);
                return;
            }
            else {
                this.CanShowPhoto = true;
                this.nophoto.visible = false;
                this.photoMax = (this.mes.length - 1);
                console.log("PhotosChange==》是否可以展示photo", !this.nophoto.visible);
            }
            this.ChangeAllCloth();
        }
        ChangeAllCloth() {
            this.HairChange(this.mes[this.photoindex].Hair);
            this.DressChange(this.mes[this.photoindex].Dress);
            this.CoatChange(this.mes[this.photoindex].Coat);
            this.ShirtChange(this.mes[this.photoindex].Shirt);
            this.TrousersChange(this.mes[this.photoindex].Trousers);
            this.SocksChange(this.mes[this.photoindex].Socks);
            this.ShoseChange(this.mes[this.photoindex].Shose);
            this.OrnamentChange(this.mes[this.photoindex].Ornament);
        }
        ChangeNextPhoto() {
            if (this.CanShowPhoto == false)
                return;
            this.photoindex++;
            if (this.photoindex > this.photoMax) {
                this.photoindex = 0;
            }
            console.log("this.photoindex ", this.photoindex);
            console.log("this.nowclothData ", this.mes[this.photoindex]);
            this.ChangeAllCloth();
            console.log("切换下一张图");
        }
        ChangeLastPhoto() {
            if (this.CanShowPhoto == false)
                return;
            this.photoindex--;
            if (this.photoindex < 0) {
                this.photoindex = this.photoMax;
            }
            console.log("切换上一张图");
            this.ChangeAllCloth();
        }
        HairChange(itemID) {
            this.Hair.visible = this.Hair1.visible = false;
            if (itemID == null || itemID == 0) {
                itemID = 10002;
            }
            this.Hair.visible = this.Hair1.visible = true;
            let clothdata = GameDataController._clothData.get(itemID);
            this.Hair.skin = clothdata.GetPath1();
            this.Hair1.skin = clothdata.GetPath2();
            this.Hair.centerX = clothdata.GetPosition1().x;
            this.Hair.centerY = clothdata.GetPosition1().y;
            this.Hair1.centerX = clothdata.GetPosition2().x;
            this.Hair1.centerY = clothdata.GetPosition2().y;
            this.Hair.zOrder = clothdata.Sort1;
            this.Hair1.zOrder = clothdata.Sort2;
        }
        OrnamentChange(itemID) {
            this.Ornament.visible = this.Ornament1.visible = false;
            if (itemID == null || itemID == 0) {
                itemID = 0;
                return;
            }
            this.Ornament.visible = this.Ornament1.visible = true;
            let clothdata = GameDataController._ClothData.get(itemID);
            this.Ornament.skin = clothdata.GetPath1();
            this.Ornament1.skin = clothdata.GetPath2();
            this.Ornament.centerX = clothdata.GetPosition1().x;
            this.Ornament.centerY = clothdata.GetPosition1().y;
            this.Ornament1.centerX = clothdata.GetPosition2().x;
            this.Ornament1.centerY = clothdata.GetPosition2().y;
            this.Ornament.zOrder = clothdata.Sort1;
            this.Ornament1.zOrder = clothdata.Sort2;
        }
        ShirtChange(itemID) {
            this.Shirt.visible = this.Shirt1.visible = false;
            if (itemID == null || itemID == 0) {
                itemID = 10000;
            }
            else {
                this.DressClose();
                this.UpDownOpen();
            }
            this.Shirt.visible = this.Shirt1.visible = true;
            let clothdata = GameDataController._ClothData.get(itemID);
            this.Shirt.skin = clothdata.GetPath1();
            this.Shirt1.skin = clothdata.GetPath2();
            this.Shirt.centerX = clothdata.GetPosition1().x;
            this.Shirt.centerY = clothdata.GetPosition1().y;
            this.Shirt1.centerX = clothdata.GetPosition2().x;
            this.Shirt1.centerY = clothdata.GetPosition2().y;
            this.Shirt.zOrder = clothdata.Sort1;
            this.Shirt1.zOrder = clothdata.Sort2;
        }
        TrousersChange(itemID) {
            this.Trousers.visible = this.Trousers1.visible = false;
            if (itemID == null || itemID == 0) {
                itemID = 10001;
            }
            else {
                this.DressClose();
                this.UpDownOpen();
            }
            this.Trousers.visible = this.Trousers1.visible = true;
            let clothdata = GameDataController._ClothData.get(itemID);
            this.Trousers.visible = this.Trousers1.visible = true;
            this.Trousers.skin = clothdata.GetPath1();
            this.Trousers1.skin = clothdata.GetPath2();
            this.Trousers.centerX = clothdata.GetPosition1().x;
            this.Trousers.centerY = clothdata.GetPosition1().y;
            this.Trousers1.centerX = clothdata.GetPosition2().x;
            this.Trousers1.centerY = clothdata.GetPosition2().y;
            this.Trousers.zOrder = clothdata.Sort1;
            this.Trousers1.zOrder = clothdata.Sort2;
        }
        DressChange(itemID) {
            this.Dress.visible = this.Dress1.visible = false;
            if (itemID == null || itemID == 0) {
                itemID = 0;
                this.UpDownOpen();
                return;
            }
            else {
                this.DressOpen();
            }
            this.Dress.visible = this.Dress1.visible = true;
            this.UpDownClose();
            let clothdata = GameDataController._ClothData.get(itemID);
            this.Dress.skin = clothdata.GetPath1();
            this.Dress1.skin = clothdata.GetPath2();
            this.Dress.centerX = clothdata.GetPosition1().x;
            this.Dress.centerY = clothdata.GetPosition1().y;
            this.Dress1.centerX = clothdata.GetPosition2().x;
            this.Dress1.centerY = clothdata.GetPosition2().y;
            this.Dress.zOrder = clothdata.Sort1;
            this.Dress1.zOrder = clothdata.Sort2;
        }
        SocksChange(itemID) {
            this.Socks1.visible = this.Socks.visible = false;
            if (itemID == null || itemID == 0) {
                itemID = 0;
                return;
            }
            this.Socks1.visible = this.Socks.visible = true;
            let clothdata = GameDataController._ClothData.get(itemID);
            this.Socks.skin = clothdata.GetPath1();
            this.Socks1.skin = clothdata.GetPath2();
            this.Socks.centerX = clothdata.GetPosition1().x;
            this.Socks.centerY = clothdata.GetPosition1().y;
            this.Socks1.centerX = clothdata.GetPosition2().x;
            this.Socks1.centerY = clothdata.GetPosition2().y;
            this.Socks.zOrder = clothdata.Sort1;
            this.Socks1.zOrder = clothdata.Sort2;
        }
        ShoseChange(itemID) {
            this.Shose.visible = this.Shose1.visible = false;
            if (itemID == null || itemID == 0) {
                itemID = 0;
                return;
            }
            this.Shose.visible = this.Shose1.visible = true;
            let clothdata = GameDataController._ClothData.get(itemID);
            this.Shose.skin = clothdata.GetPath1();
            this.Shose1.skin = clothdata.GetPath2();
            this.Shose.centerX = clothdata.GetPosition1().x;
            this.Shose.centerY = clothdata.GetPosition1().y;
            this.Shose1.centerX = clothdata.GetPosition2().x;
            this.Shose1.centerY = clothdata.GetPosition2().y;
            this.Shose.zOrder = clothdata.Sort1;
            this.Shose1.zOrder = clothdata.Sort2;
        }
        CoatChange(itemID) {
            this.Coat.visible = this.Coat1.visible = false;
            if (itemID == null || itemID == 0) {
                itemID = 0;
                return;
            }
            this.Coat.visible = this.Coat1.visible = true;
            let clothdata = GameDataController._ClothData.get(itemID);
            this.Coat.skin = clothdata.GetPath1();
            this.Coat1.skin = clothdata.GetPath2();
            this.Coat.centerX = clothdata.GetPosition1().x;
            this.Coat.centerY = clothdata.GetPosition1().y;
            this.Coat1.centerX = clothdata.GetPosition2().x;
            this.Coat1.centerY = clothdata.GetPosition2().y;
            this.Coat.zOrder = clothdata.Sort1;
            this.Coat1.zOrder = clothdata.Sort2;
        }
        UpDownClose() {
            this.ShirtChange(0);
            this.TrousersChange(0);
            this.Shirt.visible = this.Shirt1.visible = false;
            this.Trousers.visible = this.Trousers1.visible = false;
        }
        UpDownOpen() {
            this.Shirt.visible = this.Shirt1.visible = true;
            this.Trousers.visible = this.Trousers1.visible = true;
        }
        DressOpen() {
            this.Dress.visible = this.Dress1.visible = true;
        }
        DressClose() {
            this.DressChange(0);
            this.Dress.visible = this.Dress1.visible = false;
        }
    }

    class UIPhotos extends UIBase {
        constructor() {
            super(...arguments);
            this._openType = OpenType.Attach;
        }
        onInit() {
            this.FemaleRoot = this.vars("FemaleRoot");
            this._PhotosChange = this.FemaleRoot.getComponent(PhotosChange);
            this.ChangeLeft = this.vars("ChangeLeft");
            this.ChangeRight = this.vars("ChangeRight");
            this.TweenskewY = this.vars("TweenskewY");
            this.btnEv("BackHome", this.TweenOff);
            this.btnEv("ChangeLeft", this.ChangeLastPhoto);
            this.btnEv("ChangeRight", this.ChangeNextPhoto);
        }
        onShow() {
            this.TweenskewY.skewY = -90;
            this._PhotosChange.InitMes();
            this.TweenOn();
        }
        ChangeNextPhoto() {
            this._PhotosChange.ChangeNextPhoto();
        }
        ChangeLastPhoto() {
            this._PhotosChange.ChangeLastPhoto();
        }
        TweenOn() {
            let a = Laya.Tween.to(this.TweenskewY, { skewY: 0 }, 2000, Laya.Ease.linearNone, Laya.Handler.create(this, () => {
            }), 0, true, true);
        }
        TweenOff() {
            let a = Laya.Tween.to(this.TweenskewY, { skewY: -90 }, 1000, Laya.Ease.linearNone, Laya.Handler.create(this, () => {
                this.hide();
            }), 0, true, true);
        }
    }

    G["Game_Init"] = Game_Init;
    G["Game_Ready"] = Game_Ready;
    G["Game_Main"] = Game_Main;
    G["Game_Settle"] = Game_Settle;
    G["UIPreload"] = UIPreload;
    G["UIReady"] = UIReady;
    G["UIMain"] = UIMain;
    G["UISettle"] = UISettle;
    G["UIActive"] = UIActive;
    G["UISubMoneyEf"] = UISubMoneyEf;
    G["UISign"] = UISign;
    G["UIPhotos"] = UIPhotos;
    class AppFacade extends Laya.View {
        constructor() {
            super();
        }
        onOpened() {
            GameMgr.start();
        }
    }

    class ProgressBar extends Laya.Script {
        constructor() {
            super(...arguments);
            this._widthmax = 0;
            this._widthmin = 0;
            this._widthoffset = 0;
        }
        onAwake() {
            this.Bg = this.owner;
            console.log(this.Bg);
            this.Pg = this.Bg.getChildByName("Pg");
            this.mask = this.Pg['mask'];
            this._widthmax = this.mask.width;
            this._widthmin = 0;
            this._widthoffset = this._widthmax - this._widthmin;
        }
        setvalue(value) {
            if (value >= 0 && value <= 1) {
                this.mask.width = this._widthmin + this._widthoffset * value;
            }
            else if (value > 1) {
                this.mask.width = this._widthmax;
            }
            else {
                this.mask.width = this._widthmin;
            }
        }
    }

    class GameConfig {
        constructor() {
        }
        static init() {
            var reg = Laya.ClassUtils.regClass;
            reg("TJ/Promo/script/PromoOpen.ts", PromoOpen);
            reg("TJ/Promo/script/ButtonScale.ts", ButtonScale);
            reg("TJ/Promo/script/PromoItem.ts", PromoItem);
            reg("TJ/Promo/script/P201.ts", P201);
            reg("TJ/Promo/script/P202.ts", P202);
            reg("TJ/Promo/script/P103.ts", P103);
            reg("TJ/Promo/script/P204.ts", P204);
            reg("TJ/Promo/script/P205.ts", P205);
            reg("TJ/Promo/script/P106.ts", P106);
            reg("script/Game/UI/ActiveItem.ts", ActiveItem);
            reg("script/AppFacade.ts", AppFacade);
            reg("script/Game/PhotosChange.ts", PhotosChange);
            reg("script/Game/ClothChange.ts", ClothChange);
            reg("script/Game/UI/Bag/SkinItem.ts", SkinItem);
            reg("script/Game/UI/Bag/HairList.ts", HairList);
            reg("script/Game/UI/Bag/DressList.ts", DressList);
            reg("script/Game/UI/Bag/AccList.ts", AccList);
            reg("script/Game/UI/Bag/ShoesList.ts", ShoesList);
            reg("script/Game/UI/Bag/SockList.ts", SockList);
            reg("script/Game/UI/Bag/UpList.ts", UpList);
            reg("script/Game/UI/Bag/DownList.ts", DownList);
            reg("script/Game/UI/Bag/ClothBtn.ts", ClothBtn);
            reg("script/Game/UI/Bag/BagListController.ts", BagListController);
            reg("script/Game/UI/SignBtn.ts", SignBtn);
            reg("script/Game/UI/ProgressBar.ts", ProgressBar);
        }
    }
    GameConfig.width = 720;
    GameConfig.height = 1280;
    GameConfig.scaleMode = "fixedauto";
    GameConfig.screenMode = "none";
    GameConfig.alignV = "top";
    GameConfig.alignH = "left";
    GameConfig.startScene = "sys/UIInit.scene";
    GameConfig.sceneRoot = "";
    GameConfig.debug = false;
    GameConfig.stat = false;
    GameConfig.physicsDebug = true;
    GameConfig.exportSceneToJson = true;
    GameConfig.init();

    class Main {
        constructor() {
            if (window["Laya3D"])
                Laya3D.init(GameConfig.width, GameConfig.height);
            else
                Laya.init(GameConfig.width, GameConfig.height, Laya["WebGL"]);
            Laya["Physics"] && Laya["Physics"].enable();
            Laya["DebugPanel"] && Laya["DebugPanel"].enable();
            Laya.stage.scaleMode = GameConfig.scaleMode;
            Laya.stage.screenMode = GameConfig.screenMode;
            Laya.stage.alignV = GameConfig.alignV;
            Laya.stage.alignH = GameConfig.alignH;
            Laya.URL.exportSceneToJson = GameConfig.exportSceneToJson;
            if (GameConfig.debug || Laya.Utils.getQueryString("debug") == "true")
                Laya.enableDebugPanel();
            if (GameConfig.physicsDebug && Laya["PhysicsDebugDraw"])
                Laya["PhysicsDebugDraw"].enable();
            if (GameConfig.stat)
                Laya.Stat.show();
            Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
        }
        onVersionLoaded() {
            Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
        }
        onConfigLoaded() {
            GameConfig.startScene && Laya.Scene.open(GameConfig.startScene);
        }
    }
    new Main();

}());
